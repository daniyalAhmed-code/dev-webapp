{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs3/helpers/objectSpread2\";\nimport _typeof from \"@babel/runtime-corejs3/helpers/typeof\";\nimport _slicedToArray from \"@babel/runtime-corejs3/helpers/slicedToArray\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";\nimport _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\"; // This function runs after the common function,\n// `src/execute/index.js#buildRequest`\n\nimport get from 'lodash/get';\nimport isPlainObject from 'lodash/isPlainObject';\nimport btoa from 'btoa';\nexport default function buildRequest(options, req) {\n  var operation = options.operation,\n      requestBody = options.requestBody,\n      securities = options.securities,\n      spec = options.spec,\n      attachContentTypeForEmptyPayload = options.attachContentTypeForEmptyPayload;\n  var requestContentType = options.requestContentType;\n  req = applySecurities({\n    request: req,\n    securities: securities,\n    operation: operation,\n    spec: spec\n  });\n  var requestBodyDef = operation.requestBody || {};\n\n  var requestBodyMediaTypes = _Object$keys(requestBodyDef.content || {});\n\n  var isExplicitContentTypeValid = requestContentType && requestBodyMediaTypes.indexOf(requestContentType) > -1; // for OAS3: set the Content-Type\n\n  if (requestBody || attachContentTypeForEmptyPayload) {\n    // does the passed requestContentType appear in the requestBody definition?\n    if (requestContentType && isExplicitContentTypeValid) {\n      req.headers['Content-Type'] = requestContentType;\n    } else if (!requestContentType) {\n      var firstMediaType = requestBodyMediaTypes[0];\n\n      if (firstMediaType) {\n        req.headers['Content-Type'] = firstMediaType;\n        requestContentType = firstMediaType;\n      }\n    }\n  } else if (requestContentType && isExplicitContentTypeValid) {\n    req.headers['Content-Type'] = requestContentType;\n  }\n\n  if (!options.responseContentType && operation.responses) {\n    var _context;\n\n    var mediaTypes = _filterInstanceProperty(_context = _Object$entries(operation.responses)).call(_context, function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      var code = parseInt(key, 10);\n      return code >= 200 && code < 300 && isPlainObject(value.content);\n    }).reduce(function (acc, _ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          value = _ref4[1];\n\n      return _concatInstanceProperty(acc).call(acc, _Object$keys(value.content));\n    }, []);\n\n    if (mediaTypes.length > 0) {\n      req.headers.accept = mediaTypes.join(', ');\n    }\n  } // for OAS3: add requestBody to request\n\n\n  if (requestBody) {\n    if (requestContentType) {\n      if (requestBodyMediaTypes.indexOf(requestContentType) > -1) {\n        // only attach body if the requestBody has a definition for the\n        // contentType that has been explicitly set\n        if (requestContentType === 'application/x-www-form-urlencoded' || requestContentType === 'multipart/form-data') {\n          if (_typeof(requestBody) === 'object') {\n            var encoding = (requestBodyDef.content[requestContentType] || {}).encoding || {};\n            req.form = {};\n\n            _Object$keys(requestBody).forEach(function (k) {\n              req.form[k] = {\n                value: requestBody[k],\n                encoding: encoding[k] || {}\n              };\n            });\n          } else {\n            req.form = requestBody;\n          }\n        } else {\n          req.body = requestBody;\n        }\n      }\n    } else {\n      req.body = requestBody;\n    }\n  }\n\n  return req;\n} // Add security values, to operations - that declare their need on them\n// Adapted from the Swagger2 implementation\n\nexport function applySecurities(_ref5) {\n  var request = _ref5.request,\n      _ref5$securities = _ref5.securities,\n      securities = _ref5$securities === void 0 ? {} : _ref5$securities,\n      _ref5$operation = _ref5.operation,\n      operation = _ref5$operation === void 0 ? {} : _ref5$operation,\n      spec = _ref5.spec;\n\n  var result = _objectSpread({}, request);\n\n  var _securities$authorize = securities.authorized,\n      authorized = _securities$authorize === void 0 ? {} : _securities$authorize;\n  var security = operation.security || spec.security || [];\n  var isAuthorized = authorized && !!_Object$keys(authorized).length;\n  var securityDef = get(spec, ['components', 'securitySchemes']) || {};\n  result.headers = result.headers || {};\n  result.query = result.query || {};\n\n  if (!_Object$keys(securities).length || !isAuthorized || !security || Array.isArray(operation.security) && !operation.security.length) {\n    return request;\n  }\n\n  security.forEach(function (securityObj) {\n    _Object$keys(securityObj).forEach(function (key) {\n      var auth = authorized[key];\n      var schema = securityDef[key];\n\n      if (!auth) {\n        return;\n      }\n\n      var value = auth.value || auth;\n      var type = schema.type;\n\n      if (auth) {\n        if (type === 'apiKey') {\n          if (schema.in === 'query') {\n            result.query[schema.name] = value;\n          }\n\n          if (schema.in === 'header') {\n            result.headers[schema.name] = value;\n          }\n\n          if (schema.in === 'cookie') {\n            result.cookies[schema.name] = value;\n          }\n        } else if (type === 'http') {\n          if (/^basic$/i.test(schema.scheme)) {\n            var _context2;\n\n            var username = value.username || '';\n            var password = value.password || '';\n            var encoded = btoa(_concatInstanceProperty(_context2 = \"\".concat(username, \":\")).call(_context2, password));\n            result.headers.Authorization = \"Basic \".concat(encoded);\n          }\n\n          if (/^bearer$/i.test(schema.scheme)) {\n            result.headers.Authorization = \"Bearer \".concat(value);\n          }\n        } else if (type === 'oauth2' || type === 'openIdConnect') {\n          var _context3;\n\n          var token = auth.token || {};\n          var tokenName = schema['x-tokenName'] || 'access_token';\n          var tokenValue = token[tokenName];\n          var tokenType = token.token_type;\n\n          if (!tokenType || tokenType.toLowerCase() === 'bearer') {\n            tokenType = 'Bearer';\n          }\n\n          result.headers.Authorization = _concatInstanceProperty(_context3 = \"\".concat(tokenType, \" \")).call(_context3, tokenValue);\n        }\n      }\n    });\n  });\n  return result;\n}","map":{"version":3,"sources":["/home/daniyal/Downloads/vap-webapp (1)/vap-webapp/web-content/static-asset-uploader/node_modules/swagger-client/es/execute/oas3/build-request.js"],"names":["_objectSpread","_typeof","_slicedToArray","_Object$keys","_filterInstanceProperty","_Object$entries","_concatInstanceProperty","get","isPlainObject","btoa","buildRequest","options","req","operation","requestBody","securities","spec","attachContentTypeForEmptyPayload","requestContentType","applySecurities","request","requestBodyDef","requestBodyMediaTypes","content","isExplicitContentTypeValid","indexOf","headers","firstMediaType","responseContentType","responses","_context","mediaTypes","call","_ref","_ref2","key","value","code","parseInt","reduce","acc","_ref3","_ref4","length","accept","join","encoding","form","forEach","k","body","_ref5","_ref5$securities","_ref5$operation","result","_securities$authorize","authorized","security","isAuthorized","securityDef","query","Array","isArray","securityObj","auth","schema","type","in","name","cookies","test","scheme","_context2","username","password","encoded","concat","Authorization","_context3","token","tokenName","tokenValue","tokenType","token_type","toLowerCase"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,8CAA1B;AACA,OAAOC,OAAP,MAAoB,uCAApB;AACA,OAAOC,cAAP,MAA2B,8CAA3B;AACA,OAAOC,YAAP,MAAyB,mDAAzB;AACA,OAAOC,uBAAP,MAAoC,uDAApC;AACA,OAAOC,eAAP,MAA4B,sDAA5B;AACA,OAAOC,uBAAP,MAAoC,uDAApC,C,CACA;AACA;;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,eAAe,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,GAA/B,EAAoC;AACjD,MAAIC,SAAS,GAAGF,OAAO,CAACE,SAAxB;AAAA,MACIC,WAAW,GAAGH,OAAO,CAACG,WAD1B;AAAA,MAEIC,UAAU,GAAGJ,OAAO,CAACI,UAFzB;AAAA,MAGIC,IAAI,GAAGL,OAAO,CAACK,IAHnB;AAAA,MAIIC,gCAAgC,GAAGN,OAAO,CAACM,gCAJ/C;AAKA,MAAIC,kBAAkB,GAAGP,OAAO,CAACO,kBAAjC;AACAN,EAAAA,GAAG,GAAGO,eAAe,CAAC;AACpBC,IAAAA,OAAO,EAAER,GADW;AAEpBG,IAAAA,UAAU,EAAEA,UAFQ;AAGpBF,IAAAA,SAAS,EAAEA,SAHS;AAIpBG,IAAAA,IAAI,EAAEA;AAJc,GAAD,CAArB;AAMA,MAAIK,cAAc,GAAGR,SAAS,CAACC,WAAV,IAAyB,EAA9C;;AAEA,MAAIQ,qBAAqB,GAAGnB,YAAY,CAACkB,cAAc,CAACE,OAAf,IAA0B,EAA3B,CAAxC;;AAEA,MAAIC,0BAA0B,GAAGN,kBAAkB,IAAII,qBAAqB,CAACG,OAAtB,CAA8BP,kBAA9B,IAAoD,CAAC,CAA5G,CAjBiD,CAiB8D;;AAE/G,MAAIJ,WAAW,IAAIG,gCAAnB,EAAqD;AACnD;AACA,QAAIC,kBAAkB,IAAIM,0BAA1B,EAAsD;AACpDZ,MAAAA,GAAG,CAACc,OAAJ,CAAY,cAAZ,IAA8BR,kBAA9B;AACD,KAFD,MAEO,IAAI,CAACA,kBAAL,EAAyB;AAC9B,UAAIS,cAAc,GAAGL,qBAAqB,CAAC,CAAD,CAA1C;;AAEA,UAAIK,cAAJ,EAAoB;AAClBf,QAAAA,GAAG,CAACc,OAAJ,CAAY,cAAZ,IAA8BC,cAA9B;AACAT,QAAAA,kBAAkB,GAAGS,cAArB;AACD;AACF;AACF,GAZD,MAYO,IAAIT,kBAAkB,IAAIM,0BAA1B,EAAsD;AAC3DZ,IAAAA,GAAG,CAACc,OAAJ,CAAY,cAAZ,IAA8BR,kBAA9B;AACD;;AAED,MAAI,CAACP,OAAO,CAACiB,mBAAT,IAAgCf,SAAS,CAACgB,SAA9C,EAAyD;AACvD,QAAIC,QAAJ;;AAEA,QAAIC,UAAU,GAAG3B,uBAAuB,CAAC0B,QAAQ,GAAGzB,eAAe,CAACQ,SAAS,CAACgB,SAAX,CAA3B,CAAvB,CAAyEG,IAAzE,CAA8EF,QAA9E,EAAwF,UAAUG,IAAV,EAAgB;AACvH,UAAIC,KAAK,GAAGhC,cAAc,CAAC+B,IAAD,EAAO,CAAP,CAA1B;AAAA,UACIE,GAAG,GAAGD,KAAK,CAAC,CAAD,CADf;AAAA,UAEIE,KAAK,GAAGF,KAAK,CAAC,CAAD,CAFjB;;AAIA,UAAIG,IAAI,GAAGC,QAAQ,CAACH,GAAD,EAAM,EAAN,CAAnB;AACA,aAAOE,IAAI,IAAI,GAAR,IAAeA,IAAI,GAAG,GAAtB,IAA6B7B,aAAa,CAAC4B,KAAK,CAACb,OAAP,CAAjD;AACD,KAPgB,EAOdgB,MAPc,CAOP,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAC9B,UAAIC,KAAK,GAAGxC,cAAc,CAACuC,KAAD,EAAQ,CAAR,CAA1B;AAAA,UACIL,KAAK,GAAGM,KAAK,CAAC,CAAD,CADjB;;AAGA,aAAOpC,uBAAuB,CAACkC,GAAD,CAAvB,CAA6BR,IAA7B,CAAkCQ,GAAlC,EAAuCrC,YAAY,CAACiC,KAAK,CAACb,OAAP,CAAnD,CAAP;AACD,KAZgB,EAYd,EAZc,CAAjB;;AAcA,QAAIQ,UAAU,CAACY,MAAX,GAAoB,CAAxB,EAA2B;AACzB/B,MAAAA,GAAG,CAACc,OAAJ,CAAYkB,MAAZ,GAAqBb,UAAU,CAACc,IAAX,CAAgB,IAAhB,CAArB;AACD;AACF,GAvDgD,CAuD/C;;;AAGF,MAAI/B,WAAJ,EAAiB;AACf,QAAII,kBAAJ,EAAwB;AACtB,UAAII,qBAAqB,CAACG,OAAtB,CAA8BP,kBAA9B,IAAoD,CAAC,CAAzD,EAA4D;AAC1D;AACA;AACA,YAAIA,kBAAkB,KAAK,mCAAvB,IAA8DA,kBAAkB,KAAK,qBAAzF,EAAgH;AAC9G,cAAIjB,OAAO,CAACa,WAAD,CAAP,KAAyB,QAA7B,EAAuC;AACrC,gBAAIgC,QAAQ,GAAG,CAACzB,cAAc,CAACE,OAAf,CAAuBL,kBAAvB,KAA8C,EAA/C,EAAmD4B,QAAnD,IAA+D,EAA9E;AACAlC,YAAAA,GAAG,CAACmC,IAAJ,GAAW,EAAX;;AAEA5C,YAAAA,YAAY,CAACW,WAAD,CAAZ,CAA0BkC,OAA1B,CAAkC,UAAUC,CAAV,EAAa;AAC7CrC,cAAAA,GAAG,CAACmC,IAAJ,CAASE,CAAT,IAAc;AACZb,gBAAAA,KAAK,EAAEtB,WAAW,CAACmC,CAAD,CADN;AAEZH,gBAAAA,QAAQ,EAAEA,QAAQ,CAACG,CAAD,CAAR,IAAe;AAFb,eAAd;AAID,aALD;AAMD,WAVD,MAUO;AACLrC,YAAAA,GAAG,CAACmC,IAAJ,GAAWjC,WAAX;AACD;AACF,SAdD,MAcO;AACLF,UAAAA,GAAG,CAACsC,IAAJ,GAAWpC,WAAX;AACD;AACF;AACF,KAtBD,MAsBO;AACLF,MAAAA,GAAG,CAACsC,IAAJ,GAAWpC,WAAX;AACD;AACF;;AAED,SAAOF,GAAP;AACD,C,CAAC;AACF;;AAEA,OAAO,SAASO,eAAT,CAAyBgC,KAAzB,EAAgC;AACrC,MAAI/B,OAAO,GAAG+B,KAAK,CAAC/B,OAApB;AAAA,MACIgC,gBAAgB,GAAGD,KAAK,CAACpC,UAD7B;AAAA,MAEIA,UAAU,GAAGqC,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,EAA9B,GAAmCA,gBAFpD;AAAA,MAGIC,eAAe,GAAGF,KAAK,CAACtC,SAH5B;AAAA,MAIIA,SAAS,GAAGwC,eAAe,KAAK,KAAK,CAAzB,GAA6B,EAA7B,GAAkCA,eAJlD;AAAA,MAKIrC,IAAI,GAAGmC,KAAK,CAACnC,IALjB;;AAOA,MAAIsC,MAAM,GAAGtD,aAAa,CAAC,EAAD,EAAKoB,OAAL,CAA1B;;AAEA,MAAImC,qBAAqB,GAAGxC,UAAU,CAACyC,UAAvC;AAAA,MACIA,UAAU,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBADzD;AAEA,MAAIE,QAAQ,GAAG5C,SAAS,CAAC4C,QAAV,IAAsBzC,IAAI,CAACyC,QAA3B,IAAuC,EAAtD;AACA,MAAIC,YAAY,GAAGF,UAAU,IAAI,CAAC,CAACrD,YAAY,CAACqD,UAAD,CAAZ,CAAyBb,MAA5D;AACA,MAAIgB,WAAW,GAAGpD,GAAG,CAACS,IAAD,EAAO,CAAC,YAAD,EAAe,iBAAf,CAAP,CAAH,IAAgD,EAAlE;AACAsC,EAAAA,MAAM,CAAC5B,OAAP,GAAiB4B,MAAM,CAAC5B,OAAP,IAAkB,EAAnC;AACA4B,EAAAA,MAAM,CAACM,KAAP,GAAeN,MAAM,CAACM,KAAP,IAAgB,EAA/B;;AAEA,MAAI,CAACzD,YAAY,CAACY,UAAD,CAAZ,CAAyB4B,MAA1B,IAAoC,CAACe,YAArC,IAAqD,CAACD,QAAtD,IAAkEI,KAAK,CAACC,OAAN,CAAcjD,SAAS,CAAC4C,QAAxB,KAAqC,CAAC5C,SAAS,CAAC4C,QAAV,CAAmBd,MAA/H,EAAuI;AACrI,WAAOvB,OAAP;AACD;;AAEDqC,EAAAA,QAAQ,CAACT,OAAT,CAAiB,UAAUe,WAAV,EAAuB;AACtC5D,IAAAA,YAAY,CAAC4D,WAAD,CAAZ,CAA0Bf,OAA1B,CAAkC,UAAUb,GAAV,EAAe;AAC/C,UAAI6B,IAAI,GAAGR,UAAU,CAACrB,GAAD,CAArB;AACA,UAAI8B,MAAM,GAAGN,WAAW,CAACxB,GAAD,CAAxB;;AAEA,UAAI,CAAC6B,IAAL,EAAW;AACT;AACD;;AAED,UAAI5B,KAAK,GAAG4B,IAAI,CAAC5B,KAAL,IAAc4B,IAA1B;AACA,UAAIE,IAAI,GAAGD,MAAM,CAACC,IAAlB;;AAEA,UAAIF,IAAJ,EAAU;AACR,YAAIE,IAAI,KAAK,QAAb,EAAuB;AACrB,cAAID,MAAM,CAACE,EAAP,KAAc,OAAlB,EAA2B;AACzBb,YAAAA,MAAM,CAACM,KAAP,CAAaK,MAAM,CAACG,IAApB,IAA4BhC,KAA5B;AACD;;AAED,cAAI6B,MAAM,CAACE,EAAP,KAAc,QAAlB,EAA4B;AAC1Bb,YAAAA,MAAM,CAAC5B,OAAP,CAAeuC,MAAM,CAACG,IAAtB,IAA8BhC,KAA9B;AACD;;AAED,cAAI6B,MAAM,CAACE,EAAP,KAAc,QAAlB,EAA4B;AAC1Bb,YAAAA,MAAM,CAACe,OAAP,CAAeJ,MAAM,CAACG,IAAtB,IAA8BhC,KAA9B;AACD;AACF,SAZD,MAYO,IAAI8B,IAAI,KAAK,MAAb,EAAqB;AAC1B,cAAI,WAAWI,IAAX,CAAgBL,MAAM,CAACM,MAAvB,CAAJ,EAAoC;AAClC,gBAAIC,SAAJ;;AAEA,gBAAIC,QAAQ,GAAGrC,KAAK,CAACqC,QAAN,IAAkB,EAAjC;AACA,gBAAIC,QAAQ,GAAGtC,KAAK,CAACsC,QAAN,IAAkB,EAAjC;AACA,gBAAIC,OAAO,GAAGlE,IAAI,CAACH,uBAAuB,CAACkE,SAAS,GAAG,GAAGI,MAAH,CAAUH,QAAV,EAAoB,GAApB,CAAb,CAAvB,CAA8DzC,IAA9D,CAAmEwC,SAAnE,EAA8EE,QAA9E,CAAD,CAAlB;AACApB,YAAAA,MAAM,CAAC5B,OAAP,CAAemD,aAAf,GAA+B,SAASD,MAAT,CAAgBD,OAAhB,CAA/B;AACD;;AAED,cAAI,YAAYL,IAAZ,CAAiBL,MAAM,CAACM,MAAxB,CAAJ,EAAqC;AACnCjB,YAAAA,MAAM,CAAC5B,OAAP,CAAemD,aAAf,GAA+B,UAAUD,MAAV,CAAiBxC,KAAjB,CAA/B;AACD;AACF,SAbM,MAaA,IAAI8B,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,eAAlC,EAAmD;AACxD,cAAIY,SAAJ;;AAEA,cAAIC,KAAK,GAAGf,IAAI,CAACe,KAAL,IAAc,EAA1B;AACA,cAAIC,SAAS,GAAGf,MAAM,CAAC,aAAD,CAAN,IAAyB,cAAzC;AACA,cAAIgB,UAAU,GAAGF,KAAK,CAACC,SAAD,CAAtB;AACA,cAAIE,SAAS,GAAGH,KAAK,CAACI,UAAtB;;AAEA,cAAI,CAACD,SAAD,IAAcA,SAAS,CAACE,WAAV,OAA4B,QAA9C,EAAwD;AACtDF,YAAAA,SAAS,GAAG,QAAZ;AACD;;AAED5B,UAAAA,MAAM,CAAC5B,OAAP,CAAemD,aAAf,GAA+BvE,uBAAuB,CAACwE,SAAS,GAAG,GAAGF,MAAH,CAAUM,SAAV,EAAqB,GAArB,CAAb,CAAvB,CAA+DlD,IAA/D,CAAoE8C,SAApE,EAA+EG,UAA/E,CAA/B;AACD;AACF;AACF,KApDD;AAqDD,GAtDD;AAuDA,SAAO3B,MAAP;AACD","sourcesContent":["import _objectSpread from \"@babel/runtime-corejs3/helpers/objectSpread2\";\nimport _typeof from \"@babel/runtime-corejs3/helpers/typeof\";\nimport _slicedToArray from \"@babel/runtime-corejs3/helpers/slicedToArray\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";\nimport _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\n// This function runs after the common function,\n// `src/execute/index.js#buildRequest`\nimport get from 'lodash/get';\nimport isPlainObject from 'lodash/isPlainObject';\nimport btoa from 'btoa';\nexport default function buildRequest(options, req) {\n  var operation = options.operation,\n      requestBody = options.requestBody,\n      securities = options.securities,\n      spec = options.spec,\n      attachContentTypeForEmptyPayload = options.attachContentTypeForEmptyPayload;\n  var requestContentType = options.requestContentType;\n  req = applySecurities({\n    request: req,\n    securities: securities,\n    operation: operation,\n    spec: spec\n  });\n  var requestBodyDef = operation.requestBody || {};\n\n  var requestBodyMediaTypes = _Object$keys(requestBodyDef.content || {});\n\n  var isExplicitContentTypeValid = requestContentType && requestBodyMediaTypes.indexOf(requestContentType) > -1; // for OAS3: set the Content-Type\n\n  if (requestBody || attachContentTypeForEmptyPayload) {\n    // does the passed requestContentType appear in the requestBody definition?\n    if (requestContentType && isExplicitContentTypeValid) {\n      req.headers['Content-Type'] = requestContentType;\n    } else if (!requestContentType) {\n      var firstMediaType = requestBodyMediaTypes[0];\n\n      if (firstMediaType) {\n        req.headers['Content-Type'] = firstMediaType;\n        requestContentType = firstMediaType;\n      }\n    }\n  } else if (requestContentType && isExplicitContentTypeValid) {\n    req.headers['Content-Type'] = requestContentType;\n  }\n\n  if (!options.responseContentType && operation.responses) {\n    var _context;\n\n    var mediaTypes = _filterInstanceProperty(_context = _Object$entries(operation.responses)).call(_context, function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      var code = parseInt(key, 10);\n      return code >= 200 && code < 300 && isPlainObject(value.content);\n    }).reduce(function (acc, _ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          value = _ref4[1];\n\n      return _concatInstanceProperty(acc).call(acc, _Object$keys(value.content));\n    }, []);\n\n    if (mediaTypes.length > 0) {\n      req.headers.accept = mediaTypes.join(', ');\n    }\n  } // for OAS3: add requestBody to request\n\n\n  if (requestBody) {\n    if (requestContentType) {\n      if (requestBodyMediaTypes.indexOf(requestContentType) > -1) {\n        // only attach body if the requestBody has a definition for the\n        // contentType that has been explicitly set\n        if (requestContentType === 'application/x-www-form-urlencoded' || requestContentType === 'multipart/form-data') {\n          if (_typeof(requestBody) === 'object') {\n            var encoding = (requestBodyDef.content[requestContentType] || {}).encoding || {};\n            req.form = {};\n\n            _Object$keys(requestBody).forEach(function (k) {\n              req.form[k] = {\n                value: requestBody[k],\n                encoding: encoding[k] || {}\n              };\n            });\n          } else {\n            req.form = requestBody;\n          }\n        } else {\n          req.body = requestBody;\n        }\n      }\n    } else {\n      req.body = requestBody;\n    }\n  }\n\n  return req;\n} // Add security values, to operations - that declare their need on them\n// Adapted from the Swagger2 implementation\n\nexport function applySecurities(_ref5) {\n  var request = _ref5.request,\n      _ref5$securities = _ref5.securities,\n      securities = _ref5$securities === void 0 ? {} : _ref5$securities,\n      _ref5$operation = _ref5.operation,\n      operation = _ref5$operation === void 0 ? {} : _ref5$operation,\n      spec = _ref5.spec;\n\n  var result = _objectSpread({}, request);\n\n  var _securities$authorize = securities.authorized,\n      authorized = _securities$authorize === void 0 ? {} : _securities$authorize;\n  var security = operation.security || spec.security || [];\n  var isAuthorized = authorized && !!_Object$keys(authorized).length;\n  var securityDef = get(spec, ['components', 'securitySchemes']) || {};\n  result.headers = result.headers || {};\n  result.query = result.query || {};\n\n  if (!_Object$keys(securities).length || !isAuthorized || !security || Array.isArray(operation.security) && !operation.security.length) {\n    return request;\n  }\n\n  security.forEach(function (securityObj) {\n    _Object$keys(securityObj).forEach(function (key) {\n      var auth = authorized[key];\n      var schema = securityDef[key];\n\n      if (!auth) {\n        return;\n      }\n\n      var value = auth.value || auth;\n      var type = schema.type;\n\n      if (auth) {\n        if (type === 'apiKey') {\n          if (schema.in === 'query') {\n            result.query[schema.name] = value;\n          }\n\n          if (schema.in === 'header') {\n            result.headers[schema.name] = value;\n          }\n\n          if (schema.in === 'cookie') {\n            result.cookies[schema.name] = value;\n          }\n        } else if (type === 'http') {\n          if (/^basic$/i.test(schema.scheme)) {\n            var _context2;\n\n            var username = value.username || '';\n            var password = value.password || '';\n            var encoded = btoa(_concatInstanceProperty(_context2 = \"\".concat(username, \":\")).call(_context2, password));\n            result.headers.Authorization = \"Basic \".concat(encoded);\n          }\n\n          if (/^bearer$/i.test(schema.scheme)) {\n            result.headers.Authorization = \"Bearer \".concat(value);\n          }\n        } else if (type === 'oauth2' || type === 'openIdConnect') {\n          var _context3;\n\n          var token = auth.token || {};\n          var tokenName = schema['x-tokenName'] || 'access_token';\n          var tokenValue = token[tokenName];\n          var tokenType = token.token_type;\n\n          if (!tokenType || tokenType.toLowerCase() === 'bearer') {\n            tokenType = 'Bearer';\n          }\n\n          result.headers.Authorization = _concatInstanceProperty(_context3 = \"\".concat(tokenType, \" \")).call(_context3, tokenValue);\n        }\n      }\n    });\n  });\n  return result;\n}"]},"metadata":{},"sourceType":"module"}