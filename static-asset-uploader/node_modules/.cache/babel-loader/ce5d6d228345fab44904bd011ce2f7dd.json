{"ast":null,"code":"// These functions will update the request.\n// They'll be given {req, value, paramter, spec, operation}.\nexport default {\n  body: bodyBuilder,\n  header: headerBuilder,\n  query: queryBuilder,\n  path: pathBuilder,\n  formData: formDataBuilder\n}; // Add the body to the request\n\nfunction bodyBuilder(_ref) {\n  var req = _ref.req,\n      value = _ref.value;\n  req.body = value;\n} // Add a form data object.\n\n\nfunction formDataBuilder(_ref2) {\n  var req = _ref2.req,\n      value = _ref2.value,\n      parameter = _ref2.parameter;\n\n  if (value || parameter.allowEmptyValue) {\n    req.form = req.form || {};\n    req.form[parameter.name] = {\n      value: value,\n      allowEmptyValue: parameter.allowEmptyValue,\n      collectionFormat: parameter.collectionFormat\n    };\n  }\n} // Add a header to the request\n\n\nfunction headerBuilder(_ref3) {\n  var req = _ref3.req,\n      parameter = _ref3.parameter,\n      value = _ref3.value;\n  req.headers = req.headers || {};\n\n  if (typeof value !== 'undefined') {\n    req.headers[parameter.name] = value;\n  }\n} // Replace path paramters, with values ( ie: the URL )\n\n\nfunction pathBuilder(_ref4) {\n  var req = _ref4.req,\n      value = _ref4.value,\n      parameter = _ref4.parameter;\n  req.url = req.url.split(\"{\".concat(parameter.name, \"}\")).join(encodeURIComponent(value));\n} // Add a query to the `query` object, which will later be stringified into the URL's search\n\n\nfunction queryBuilder(_ref5) {\n  var req = _ref5.req,\n      value = _ref5.value,\n      parameter = _ref5.parameter;\n  req.query = req.query || {};\n\n  if (value === false && parameter.type === 'boolean') {\n    value = 'false';\n  }\n\n  if (value === 0 && ['number', 'integer'].indexOf(parameter.type) > -1) {\n    value = '0';\n  }\n\n  if (value) {\n    req.query[parameter.name] = {\n      collectionFormat: parameter.collectionFormat,\n      value: value\n    };\n  } else if (parameter.allowEmptyValue && value !== undefined) {\n    var paramName = parameter.name;\n    req.query[paramName] = req.query[paramName] || {};\n    req.query[paramName].allowEmptyValue = true;\n  }\n}","map":{"version":3,"sources":["/home/daniyal/Downloads/vap-webapp (1)/vap-webapp/web-content/static-asset-uploader/node_modules/swagger-client/es/execute/swagger2/parameter-builders.js"],"names":["body","bodyBuilder","header","headerBuilder","query","queryBuilder","path","pathBuilder","formData","formDataBuilder","_ref","req","value","_ref2","parameter","allowEmptyValue","form","name","collectionFormat","_ref3","headers","_ref4","url","split","concat","join","encodeURIComponent","_ref5","type","indexOf","undefined","paramName"],"mappings":"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","sourcesContent":["// These functions will update the request.\n// They'll be given {req, value, paramter, spec, operation}.\nexport default {\n  body: bodyBuilder,\n  header: headerBuilder,\n  query: queryBuilder,\n  path: pathBuilder,\n  formData: formDataBuilder\n}; // Add the body to the request\n\nfunction bodyBuilder(_ref) {\n  var req = _ref.req,\n      value = _ref.value;\n  req.body = value;\n} // Add a form data object.\n\n\nfunction formDataBuilder(_ref2) {\n  var req = _ref2.req,\n      value = _ref2.value,\n      parameter = _ref2.parameter;\n\n  if (value || parameter.allowEmptyValue) {\n    req.form = req.form || {};\n    req.form[parameter.name] = {\n      value: value,\n      allowEmptyValue: parameter.allowEmptyValue,\n      collectionFormat: parameter.collectionFormat\n    };\n  }\n} // Add a header to the request\n\n\nfunction headerBuilder(_ref3) {\n  var req = _ref3.req,\n      parameter = _ref3.parameter,\n      value = _ref3.value;\n  req.headers = req.headers || {};\n\n  if (typeof value !== 'undefined') {\n    req.headers[parameter.name] = value;\n  }\n} // Replace path paramters, with values ( ie: the URL )\n\n\nfunction pathBuilder(_ref4) {\n  var req = _ref4.req,\n      value = _ref4.value,\n      parameter = _ref4.parameter;\n  req.url = req.url.split(\"{\".concat(parameter.name, \"}\")).join(encodeURIComponent(value));\n} // Add a query to the `query` object, which will later be stringified into the URL's search\n\n\nfunction queryBuilder(_ref5) {\n  var req = _ref5.req,\n      value = _ref5.value,\n      parameter = _ref5.parameter;\n  req.query = req.query || {};\n\n  if (value === false && parameter.type === 'boolean') {\n    value = 'false';\n  }\n\n  if (value === 0 && ['number', 'integer'].indexOf(parameter.type) > -1) {\n    value = '0';\n  }\n\n  if (value) {\n    req.query[parameter.name] = {\n      collectionFormat: parameter.collectionFormat,\n      value: value\n    };\n  } else if (parameter.allowEmptyValue && value !== undefined) {\n    var paramName = parameter.name;\n    req.query[paramName] = req.query[paramName] || {};\n    req.query[paramName].allowEmptyValue = true;\n  }\n}"]},"metadata":{},"sourceType":"module"}