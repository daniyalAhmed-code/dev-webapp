{"ast":null,"code":"import React,{useState,useMemo}from'react';import{Link}from'react-router-dom';import{Menu,Search,Grid}from'semantic-ui-react';import{useObserver}from'mobx-react';import{store}from'services/state';import _ from'lodash';import ApisMenu from'./ApisMenu';import PageWithSidebar from'components/PageWithSidebar';import'./ApiSearch.css';import searchTermRegexp from'utils/search-term-regexp';import{jsx as _jsx}from\"react/jsx-runtime\";function prepareSearch(searchString){return Array.from(new Set(searchString.toLowerCase().match(searchTermRegexp)));}export default function ApiSearch(props){const[value,setValue]=useState('');const[searchQuery,setSearchQuery]=useState('');const isLoaded=useObserver(()=>store.apiList!=null&&store.apiList.loaded);// Easier than building an actual search index. (And client-side text search *sucks* massively.)\n// TODO: replace this with a customized search eventually. At the very least, the Swagger API\n// fields shouldn't be here, and\nconst dataSet=useMemo(()=>!store.apiList?[]:[...store.apiList.apiGateway.map(_ref=>{let{id,apiStage:stage,swagger,usagePlan}=_ref;return{url:\"/apis/\".concat(id,\"/\").concat(stage),title:\"\".concat(swagger.info.title,\" - \").concat(stage),stage:\"\".concat(stage),searchable:prepareSearch(\"\".concat(JSON.stringify(swagger),\" \").concat(JSON.stringify(usagePlan),\" \").concat(stage)).join(' ')};}),...store.apiList.generic.map(_ref2=>{let{id,swagger,apiStage:stage}=_ref2;const api={url:\"/apis/\".concat(id),title:stage?\"\".concat(swagger.info.title,\" - \").concat(stage):\"\".concat(swagger.info.title),searchable:prepareSearch(\"\".concat(JSON.stringify(swagger),\" \").concat(stage||'')).join(' ')};if(stage)api.stage=stage;return api;})],[isLoaded]);// changed-eslint-disable-line changed-react-hooks/exhaustive-deps\nconst updateSearch=useMemo(()=>_.debounce(setSearchQuery,100,{leading:true}),[]);const results=useMemo(()=>{if(!searchQuery)return[];const prepared=prepareSearch(searchQuery);if(!prepared.length)return prepared;return dataSet.filter(result=>prepared.every(term=>result.searchable.includes(term)));},[searchQuery,dataSet]);function handleSearchChange(e,_ref3){let{value}=_ref3;setValue(value);updateSearch(value);}return/*#__PURE__*/_jsx(PageWithSidebar,{sidebarContent:/*#__PURE__*/_jsx(ApisMenu,{path:props.match,activateFirst:false}),SidebarPusherProps:{className:'swagger-section'},children:/*#__PURE__*/_jsx(Grid,{style:{padding:'2em'},children:/*#__PURE__*/_jsx(Grid.Column,{id:\"api-search\",children:/*#__PURE__*/_jsx(Search,{placeholder:\"Search for an API, stage, or any content in an API's definition.\",onSearchChange:handleSearchChange,results:results,resultRenderer:result=>/*#__PURE__*/_jsx(Menu.Item,{as:Link,to:result.url,style:{display:'inline-block',width:'100%',height:'100%'},children:result.title}),value:value,...props})})})});}","map":{"version":3,"sources":["/home/daniyal/Downloads/vap-webapp (1)/vap-webapp/web-content/static-asset-uploader/src/components/ApiSearch.jsx"],"names":["React","useState","useMemo","Link","Menu","Search","Grid","useObserver","store","_","ApisMenu","PageWithSidebar","searchTermRegexp","prepareSearch","searchString","Array","from","Set","toLowerCase","match","ApiSearch","props","value","setValue","searchQuery","setSearchQuery","isLoaded","apiList","loaded","dataSet","apiGateway","map","id","apiStage","stage","swagger","usagePlan","url","title","info","searchable","JSON","stringify","join","generic","api","updateSearch","debounce","leading","results","prepared","length","filter","result","every","term","includes","handleSearchChange","e","className","padding","display","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\n\nimport { Link } from 'react-router-dom'\nimport { Menu, Search, Grid } from 'semantic-ui-react'\n\nimport { useObserver } from 'mobx-react'\nimport { store } from 'services/state'\n\nimport _ from 'lodash'\n\nimport ApisMenu from './ApisMenu'\nimport PageWithSidebar from 'components/PageWithSidebar'\nimport './ApiSearch.css'\nimport searchTermRegexp from 'utils/search-term-regexp'\n\nfunction prepareSearch (searchString) {\n  return Array.from(new Set(searchString.toLowerCase().match(searchTermRegexp)))\n}\n\nexport default function ApiSearch (props) {\n  const [value, setValue] = useState('')\n  const [searchQuery, setSearchQuery] = useState('')\n\n  const isLoaded = useObserver(() => store.apiList != null && store.apiList.loaded)\n\n  // Easier than building an actual search index. (And client-side text search *sucks* massively.)\n  // TODO: replace this with a customized search eventually. At the very least, the Swagger API\n  // fields shouldn't be here, and\n  const dataSet = useMemo(() => !store.apiList ? [] : [\n    ...store.apiList.apiGateway.map(({ id, apiStage: stage, swagger, usagePlan }) => ({\n      url: `/apis/${id}/${stage}`,\n      title: `${swagger.info.title} - ${stage}`,\n      stage: `${stage}`,\n      searchable: prepareSearch(`${JSON.stringify(swagger)} ${JSON.stringify(usagePlan)} ${stage}`).join(' ')\n    })),\n    ...store.apiList.generic.map(({ id, swagger, apiStage: stage }) => {\n      const api = {\n        url: `/apis/${id}`,\n        title: stage ? `${swagger.info.title} - ${stage}` : `${swagger.info.title}`,\n        searchable: prepareSearch(`${JSON.stringify(swagger)} ${stage || ''}`).join(' ')\n      }\n      if (stage) api.stage = stage\n      return api\n    })\n  ], [isLoaded]) // changed-eslint-disable-line changed-react-hooks/exhaustive-deps\n\n  const updateSearch = useMemo(() => _.debounce(setSearchQuery, 100, { leading: true }), [])\n\n  const results = useMemo(() => {\n    if (!searchQuery) return []\n    const prepared = prepareSearch(searchQuery)\n    if (!prepared.length) return prepared\n    return dataSet.filter(result => prepared.every(term => result.searchable.includes(term)))\n  }, [searchQuery, dataSet])\n\n  function handleSearchChange (e, { value }) {\n    setValue(value)\n    updateSearch(value)\n  }\n\n  return (\n    <PageWithSidebar\n      sidebarContent={<ApisMenu path={props.match} activateFirst={false} />}\n      SidebarPusherProps={{ className: 'swagger-section' }}\n    >\n      <Grid style={{ padding: '2em' }}>\n        <Grid.Column id='api-search'>\n          <Search\n            placeholder=\"Search for an API, stage, or any content in an API's definition.\"\n            onSearchChange={handleSearchChange}\n            results={results}\n            resultRenderer={(result) => (\n              <Menu.Item\n                as={Link}\n                to={result.url}\n                style={{ display: 'inline-block', width: '100%', height: '100%' }}\n              >\n                {result.title}\n              </Menu.Item>\n            )}\n            value={value}\n            {...props}\n          />\n        </Grid.Column>\n      </Grid>\n    </PageWithSidebar>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}