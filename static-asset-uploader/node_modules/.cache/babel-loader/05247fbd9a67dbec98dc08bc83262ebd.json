{"ast":null,"code":"// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport AWS from'aws-sdk';// services\nimport{store}from'services/state';import{getCurrentUser}from'./accounts';import{updateAllUserData}from'services/api-catalog';import{initApiGatewayClient,apiGatewayClient,cognitoDomain,cognitoIdentityPoolId,cognitoUserPoolId,cognitoClientId,cognitoRegion}from'services/api';import*as jwtDecode from'jwt-decode';export function isAuthenticated(){return store.idToken;}function getPreferredRole(){return jwtDecode(store.idToken)['cognito:preferred_role']||'';}export function isRegistered(){if(!store.idToken){return false;}const role=getPreferredRole();return role.includes('-CognitoAdminRole-')||role.includes('-CognitoRegisteredRole-');}export function isAdmin(){return store.idToken&&getPreferredRole().includes('-CognitoAdminRole-');}let logoutTimer;function getRemainingSessionTime(idToken){return jwtDecode(idToken).exp*1000-Date.now();}/**\n * On page load, look for an active cookie. If it exists and isn't expired, great, use it. Otherwise, clear everything and make sure we're not logged in.\n */export function init(){// attempt to refresh credentials from active session\nlet idToken;let diff=0;try{idToken=window.localStorage.getItem(cognitoUserPoolId);if(idToken)diff=getRemainingSessionTime(idToken);}catch(error){console.error(error);}if(diff>0){store.idToken=idToken;logoutTimer=setTimeout(logout,diff);setCredentials();}else{initApiGatewayClient();// init a blank client (will get overwritten if we have creds)\nlogout();}}/**\n * Gets triggered by the callback from the cognito user pool. Pretty much all it does is grab and store the idToken.\n */export function login(){return new Promise((resolve,reject)=>{let idToken;// let accessToken, username\ntry{window.location.hash.replace(/^#/,'').split('&').map(param=>param.split('=')).forEach(param=>{// record the id_token and access_token\nif(param[0]==='id_token')idToken=param[1];// if (param[0] === 'access_token') accessToken = param[1]\n});if(idToken){// we get both, we set both, but we only really care about the idToken\n// username = jwtDecode(idToken)['cognito:username']\nwindow.localStorage.setItem(cognitoUserPoolId,idToken);store.idToken=idToken;logoutTimer=setTimeout(logout,getRemainingSessionTime(idToken));setCredentials();resolve(idToken);}}catch(error){reject(error);}});}export const getLoginRedirectUrl=()=>\"\".concat(window.location.protocol,\"//\").concat(window.location.host,\"/index.html?action=login\");export const getLogoutRedirectUrl=()=>\"\".concat(window.location.protocol,\"//\").concat(window.location.host,\"/index.html?action=logout\");function getCurrentUserDetails(){getCurrentUser().then(user=>{if(user){store.currentUser=user;console.log('current user',user);}});}function setCredentials(){const preferredRole=jwtDecode(store.idToken)['cognito:preferred_role'];const params={IdentityPoolId:cognitoIdentityPoolId,Logins:{[\"cognito-idp.\".concat(cognitoRegion,\".amazonaws.com/\").concat(cognitoUserPoolId)]:store.idToken}};if(preferredRole)params.RoleArn=preferredRole;AWS.config.credentials=new AWS.CognitoIdentityCredentials(params);return new Promise((resolve,reject)=>{AWS.config.credentials.refresh(error=>{if(error){console.error(error);return reject(error);}initApiGatewayClient(AWS.config.credentials);store.user={email:jwtDecode(store.idToken).email};getCurrentUserDetails();updateAllUserData();return apiGatewayClient().then(apiGatewayClient=>apiGatewayClient.post('/signin',{},{},{}));});});}/**\n * Callback for the Cognito User Pool's logout just to make sure we clean up everything.\n */export function logout(){clearTimeout(logoutTimer);logoutTimer=undefined;if(store.idToken){store.resetUserData();window.localStorage.clear();if(cognitoDomain){// redirect to cognito to log out there, too\nconst redirectUrl=getLogoutRedirectUrl();window.location=\"\".concat(cognitoDomain,\"/logout?client_id=\").concat(cognitoClientId,\"&logout_uri=\").concat(redirectUrl);}}}export function getCognitoUrl(){const redirectUri=getLoginRedirectUrl();return\"\".concat(cognitoDomain,\"/login?response_type=token&client_id=\").concat(cognitoClientId,\"&redirect_uri=\").concat(redirectUri);}","map":{"version":3,"sources":["/home/daniyal/Downloads/vap-webapp (1)/vap-webapp/web-content/static-asset-uploader/src/services/self.js"],"names":["AWS","store","getCurrentUser","updateAllUserData","initApiGatewayClient","apiGatewayClient","cognitoDomain","cognitoIdentityPoolId","cognitoUserPoolId","cognitoClientId","cognitoRegion","jwtDecode","isAuthenticated","idToken","getPreferredRole","isRegistered","role","includes","isAdmin","logoutTimer","getRemainingSessionTime","exp","Date","now","init","diff","window","localStorage","getItem","error","console","setTimeout","logout","setCredentials","login","Promise","resolve","reject","location","hash","replace","split","map","param","forEach","setItem","getLoginRedirectUrl","protocol","host","getLogoutRedirectUrl","getCurrentUserDetails","then","user","currentUser","log","preferredRole","params","IdentityPoolId","Logins","RoleArn","config","credentials","CognitoIdentityCredentials","refresh","email","post","clearTimeout","undefined","resetUserData","clear","redirectUrl","getCognitoUrl","redirectUri"],"mappings":"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","sourcesContent":["// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AWS from 'aws-sdk'\n\n// services\nimport { store } from 'services/state'\nimport { getCurrentUser } from './accounts'\nimport { updateAllUserData } from 'services/api-catalog'\nimport { initApiGatewayClient, apiGatewayClient, cognitoDomain, cognitoIdentityPoolId, cognitoUserPoolId, cognitoClientId, cognitoRegion } from 'services/api'\nimport * as jwtDecode from 'jwt-decode'\n\nexport function isAuthenticated () {\n  return store.idToken\n}\n\nfunction getPreferredRole () {\n  return jwtDecode(store.idToken)['cognito:preferred_role'] || ''\n}\n\nexport function isRegistered () {\n  if (!store.idToken) {\n    return false\n  }\n\n  const role = getPreferredRole()\n  return (\n    role.includes('-CognitoAdminRole-') ||\n    role.includes('-CognitoRegisteredRole-')\n  )\n}\n\nexport function isAdmin () {\n  return store.idToken && getPreferredRole().includes('-CognitoAdminRole-')\n}\n\nlet logoutTimer\n\nfunction getRemainingSessionTime (idToken) {\n  return jwtDecode(idToken).exp * 1000 - Date.now()\n}\n\n/**\n * On page load, look for an active cookie. If it exists and isn't expired, great, use it. Otherwise, clear everything and make sure we're not logged in.\n */\nexport function init () {\n  // attempt to refresh credentials from active session\n\n  let idToken\n  let diff = 0\n\n  try {\n    idToken = window.localStorage.getItem(cognitoUserPoolId)\n    if (idToken) diff = getRemainingSessionTime(idToken)\n  } catch (error) {\n    console.error(error)\n  }\n\n  if (diff > 0) {\n    store.idToken = idToken\n    logoutTimer = setTimeout(logout, diff)\n    setCredentials()\n  } else {\n    initApiGatewayClient() // init a blank client (will get overwritten if we have creds)\n    logout()\n  }\n}\n\n/**\n * Gets triggered by the callback from the cognito user pool. Pretty much all it does is grab and store the idToken.\n */\nexport function login () {\n  return new Promise((resolve, reject) => {\n    let idToken\n    // let accessToken, username\n\n    try {\n      window.location.hash\n        .replace(/^#/, '')\n        .split('&')\n        .map(param => param.split('='))\n        .forEach(param => {\n          // record the id_token and access_token\n          if (param[0] === 'id_token') idToken = param[1]\n          // if (param[0] === 'access_token') accessToken = param[1]\n        })\n\n      if (idToken) { // we get both, we set both, but we only really care about the idToken\n        // username = jwtDecode(idToken)['cognito:username']\n\n        window.localStorage.setItem(cognitoUserPoolId, idToken)\n\n        store.idToken = idToken\n\n\n        logoutTimer = setTimeout(logout, getRemainingSessionTime(idToken))\n\n        setCredentials()\n\n        resolve(idToken)\n      }\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n\nexport const getLoginRedirectUrl = () =>\n  `${window.location.protocol}//${window.location.host}/index.html?action=login`\nexport const getLogoutRedirectUrl = () =>\n  `${window.location.protocol}//${window.location.host}/index.html?action=logout`\n\nfunction getCurrentUserDetails () {\n  getCurrentUser().then(user => {\n    if (user) {\n      store.currentUser = user\n      console.log('current user', user)\n    }\n  })\n}\n\nfunction setCredentials () {\n  const preferredRole = jwtDecode(store.idToken)['cognito:preferred_role']\n  const params = {\n    IdentityPoolId: cognitoIdentityPoolId,\n    Logins: {\n      [`cognito-idp.${cognitoRegion}.amazonaws.com/${cognitoUserPoolId}`]: store.idToken\n    }\n  }\n\n  if (preferredRole) params.RoleArn = preferredRole\n\n  AWS.config.credentials = new AWS.CognitoIdentityCredentials(params)\n\n  return new Promise((resolve, reject) => {\n    AWS.config.credentials.refresh(error => {\n      if (error) {\n        console.error(error)\n        return reject(error)\n      }\n\n      initApiGatewayClient(AWS.config.credentials)\n      store.user = { email: jwtDecode(store.idToken).email }\n      getCurrentUserDetails()\n      updateAllUserData()\n\n      return apiGatewayClient()\n        .then(apiGatewayClient => apiGatewayClient.post('/signin', {}, {}, {}))\n    })\n  })\n}\n\n/**\n * Callback for the Cognito User Pool's logout just to make sure we clean up everything.\n */\nexport function logout () {\n  clearTimeout(logoutTimer)\n  logoutTimer = undefined\n  if (store.idToken) {\n    store.resetUserData()\n    window.localStorage.clear()\n\n    if (cognitoDomain) {\n      // redirect to cognito to log out there, too\n      const redirectUrl = getLogoutRedirectUrl()\n      window.location = `${cognitoDomain}/logout?client_id=${cognitoClientId}&logout_uri=${redirectUrl}`\n    }\n  }\n}\n\nexport function getCognitoUrl () {\n  const redirectUri = getLoginRedirectUrl()\n  return `${cognitoDomain}/login?response_type=token&client_id=${cognitoClientId}&redirect_uri=${redirectUri}`\n}\n"]},"metadata":{},"sourceType":"module"}