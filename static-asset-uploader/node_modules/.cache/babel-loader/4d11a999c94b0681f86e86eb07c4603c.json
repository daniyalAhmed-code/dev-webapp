{"ast":null,"code":"// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport{observable,reaction}from'mobx';import _ from'lodash';import{getSubscribedUsagePlan}from'services/api-catalog';/**\n * A function that returns a new object contain the default store\n */function storeDefaults(){return{api:undefined,apiKey:undefined,apiKeyFetchFailed:false,apiList:{loaded:false,apiGateway:[],generic:[]},user:undefined,idToken:undefined,currentUser:undefined,usagePlans:[],subscriptions:[],notifications:[],visibility:{apiGateway:[],generic:{}}};}/**\n * Trick for logging the store: clone the object. i.e. _.cloneDeep(store) or JSON.parse(JSON.stringify(store))\n */export const store=observable({...storeDefaults(),initialize(){Object.assign(this,storeDefaults());return this;},/**\n   * Reset the entire store to the original values\n   */clear(){return this.initialize();},/**\n   * Reset specific keys on the store to their initial values\n   *\n   * @param {string[]} keys   The keys that should be reset. Accepts lodash paths. (e.g. )\n   */reset(){const defaults=storeDefaults();for(var _len=arguments.length,keys=new Array(_len),_key=0;_key<_len;_key++){keys[_key]=arguments[_key];}keys.forEach(key=>_.set(this,key,_.get(defaults,key)));return this;},resetUserData(){this.reset('apiKey','user','subscriptions');}});/**\n *\n * A short-hand function for creating reactions with protections against cyclical errors.\n *\n * @param {Function} triggerFn   A function that determines when fire the effectFn and what to pass to the effectFn.\n * @param {Function} effectFn   The side-effect to run when the data tracked by the triggerFn is changed.\n *\n * A note on MobX reactions: the side effect will \"only react to data that was accessed in the data expression\" and will only fire \"when the data returned by the expression has changed\". (https://mobx.js.org/refguide/reaction.html)\n */function reactTo(triggerFn,effectFn){// note -- had issues with cyclical reactions in the past\n// the comments below will fix them if they come up again\n// DO NOT REMOVE THEM\n// function restartReaction() {\nreaction(triggerFn,(data,action)=>{// action.dispose() // clear this \"listener\" so we don't cycle\neffectFn(data,action);// restartReaction() // restart the reaction after doing stuff to the data\n});// }\n// restartReaction()\n}reactTo(()=>({subscriptions:store.subscriptions,usagePlans:store.usagePlans}),_ref=>{let{usagePlans}=_ref;updateSubscriptionStatus(usagePlans);});reactTo(()=>[].concat(store.apiList.apiGateway,store.apiList.generic),apiList=>{fetchApiImage(apiList);});/**\n *\n */function fetchApiImage(apiList){apiList.forEach(api=>{if(!api.logo){const key=api.apiStage==null?api.id:\"\".concat(api.apiId,\"_\").concat(api.apiStage);const specificLogo=\"/custom-content/api-logos/\".concat(key,\".png\");// fetch automatically follows redirects; setting redirect to `manual` prevents this\n// we need to prevent it so that we can accurately determine if the image exists\nwindow.fetch(specificLogo,{headers:{Accept:'image/png'},redirect:'manual'}).then(response=>{if(response.ok){api.logo=specificLogo;}else api.logo='/custom-content/api-logos/default.png';});}});}/**\n * A helper function that simple re-builds the subscribed status for each api in the catalog.\n *\n * Should be run every time either the catalog updates or the\n */function updateSubscriptionStatus(usagePlans){if(usagePlans){usagePlans.forEach(usagePlan=>{const subscribed=!!getSubscribedUsagePlan(usagePlan.id);usagePlan.subscribed=subscribed;usagePlan.apis.forEach(api=>{api.subscribed=subscribed;});});}}export default store.initialize();","map":{"version":3,"sources":["/home/daniyal/Downloads/vap-webapp (1)/vap-webapp/web-content/static-asset-uploader/src/services/state.js"],"names":["observable","reaction","_","getSubscribedUsagePlan","storeDefaults","api","undefined","apiKey","apiKeyFetchFailed","apiList","loaded","apiGateway","generic","user","idToken","currentUser","usagePlans","subscriptions","notifications","visibility","store","initialize","Object","assign","clear","reset","defaults","keys","forEach","key","set","get","resetUserData","reactTo","triggerFn","effectFn","data","action","updateSubscriptionStatus","concat","fetchApiImage","logo","apiStage","id","apiId","specificLogo","window","fetch","headers","Accept","redirect","then","response","ok","usagePlan","subscribed","apis"],"mappings":"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","sourcesContent":["// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { observable, reaction } from 'mobx'\nimport _ from 'lodash'\n\nimport { getSubscribedUsagePlan } from 'services/api-catalog'\n\n/**\n * A function that returns a new object contain the default store\n */\nfunction storeDefaults () {\n  return {\n    api: undefined,\n    apiKey: undefined,\n    apiKeyFetchFailed: false,\n\n    apiList: {\n      loaded: false,\n      apiGateway: [],\n      generic: []\n    },\n\n    user: undefined,\n    idToken: undefined,\n    currentUser: undefined,\n\n    usagePlans: [],\n\n    subscriptions: [],\n\n    notifications: [],\n\n    visibility: {\n      apiGateway: [],\n      generic: {}\n    }\n  }\n}\n\n/**\n * Trick for logging the store: clone the object. i.e. _.cloneDeep(store) or JSON.parse(JSON.stringify(store))\n */\nexport const store = observable({\n  ...(storeDefaults()),\n\n  initialize () {\n    Object.assign(this, storeDefaults())\n\n    return this\n  },\n\n  /**\n   * Reset the entire store to the original values\n   */\n  clear () {\n    return this.initialize()\n  },\n\n  /**\n   * Reset specific keys on the store to their initial values\n   *\n   * @param {string[]} keys   The keys that should be reset. Accepts lodash paths. (e.g. )\n   */\n  reset (...keys) {\n    const defaults = storeDefaults()\n    keys.forEach(key => _.set(this, key, _.get(defaults, key)))\n    return this\n  },\n\n  resetUserData () {\n    this.reset('apiKey', 'user', 'subscriptions')\n  }\n})\n\n/**\n *\n * A short-hand function for creating reactions with protections against cyclical errors.\n *\n * @param {Function} triggerFn   A function that determines when fire the effectFn and what to pass to the effectFn.\n * @param {Function} effectFn   The side-effect to run when the data tracked by the triggerFn is changed.\n *\n * A note on MobX reactions: the side effect will \"only react to data that was accessed in the data expression\" and will only fire \"when the data returned by the expression has changed\". (https://mobx.js.org/refguide/reaction.html)\n */\nfunction reactTo (triggerFn, effectFn) {\n  // note -- had issues with cyclical reactions in the past\n  // the comments below will fix them if they come up again\n  // DO NOT REMOVE THEM\n\n  // function restartReaction() {\n  reaction(\n    triggerFn,\n    (data, action) => {\n      // action.dispose() // clear this \"listener\" so we don't cycle\n\n      effectFn(data, action)\n\n      // restartReaction() // restart the reaction after doing stuff to the data\n    }\n  )\n  // }\n\n  // restartReaction()\n}\n\nreactTo(\n  () => ({ subscriptions: store.subscriptions, usagePlans: store.usagePlans }),\n  ({ usagePlans }) => {\n    updateSubscriptionStatus(usagePlans)\n  }\n)\n\nreactTo(\n  () => [].concat(store.apiList.apiGateway, store.apiList.generic),\n  apiList => {\n    fetchApiImage(apiList)\n  }\n)\n\n/**\n *\n */\nfunction fetchApiImage (apiList) {\n  apiList.forEach(api => {\n    if (!api.logo) {\n      const key = api.apiStage == null ? api.id : `${api.apiId}_${api.apiStage}`\n      const specificLogo = `/custom-content/api-logos/${key}.png`\n\n      // fetch automatically follows redirects; setting redirect to `manual` prevents this\n      // we need to prevent it so that we can accurately determine if the image exists\n      window.fetch(specificLogo, { headers: { Accept: 'image/png' }, redirect: 'manual' }).then(response => {\n        if (response.ok) { api.logo = specificLogo } else api.logo = '/custom-content/api-logos/default.png'\n      })\n    }\n  })\n}\n\n/**\n * A helper function that simple re-builds the subscribed status for each api in the catalog.\n *\n * Should be run every time either the catalog updates or the\n */\nfunction updateSubscriptionStatus (usagePlans) {\n  if (usagePlans) {\n    usagePlans.forEach(usagePlan => {\n      const subscribed = !!getSubscribedUsagePlan(usagePlan.id)\n      usagePlan.subscribed = subscribed\n\n      usagePlan.apis.forEach(api => { api.subscribed = subscribed })\n    })\n  }\n}\n\nexport default store.initialize()\n"]},"metadata":{},"sourceType":"module"}