{"ast":null,"code":"// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport AWS from'aws-sdk';import _ from'lodash';export const awsRegion=_.get(window,'config.region');export const cognitoRegion=_.get(window,'config.region');export const cognitoUserPoolId=_.get(window,'config.userPoolId');export const cognitoIdentityPoolId=_.get(window,'config.identityPoolId');export const cognitoClientId=_.get(window,'config.userPoolClientId');export const cognitoDomain=_.get(window,'config.userPoolDomain');AWS.config.region=cognitoRegion;let cachedClient;let cachedClientWithCredentials;export function initApiGatewayClient(){let{accessKeyId,secretAccessKey,sessionToken}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};cachedClient=window.apigClientFactory.newClient({accessKey:accessKeyId,secretKey:secretAccessKey,sessionToken:sessionToken,region:awsRegion});if(accessKeyId&&secretAccessKey&&sessionToken){cachedClientWithCredentials=cachedClient;}window.apigw=cachedClient;}export function apiGatewayClient(){if(cachedClient)return Promise.resolve(cachedClient);return new Promise(resolve=>{const poller=setInterval(()=>{if(cachedClient){clearInterval(poller);resolve(cachedClient);}},100);});}export function apiGatewayClientWithCredentials(){if(cachedClientWithCredentials){return Promise.resolve(cachedClientWithCredentials);}return new Promise(resolve=>{const poller=setInterval(()=>{if(cachedClientWithCredentials){clearInterval(poller);resolve(cachedClientWithCredentials);}},100);});}","map":{"version":3,"sources":["/home/daniyal/Downloads/vap-webapp (1)/vap-webapp/web-content/static-asset-uploader/src/services/api.js"],"names":["AWS","_","awsRegion","get","window","cognitoRegion","cognitoUserPoolId","cognitoIdentityPoolId","cognitoClientId","cognitoDomain","config","region","cachedClient","cachedClientWithCredentials","initApiGatewayClient","accessKeyId","secretAccessKey","sessionToken","apigClientFactory","newClient","accessKey","secretKey","apigw","apiGatewayClient","Promise","resolve","poller","setInterval","clearInterval","apiGatewayClientWithCredentials"],"mappings":"AAAA;AACA;AAEA,MAAOA,CAAAA,GAAP,KAAgB,SAAhB,CAEA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CAEA,MAAO,MAAMC,CAAAA,SAAS,CAAGD,CAAC,CAACE,GAAF,CAAMC,MAAN,CAAc,eAAd,CAAlB,CACP,MAAO,MAAMC,CAAAA,aAAa,CAAGJ,CAAC,CAACE,GAAF,CAAMC,MAAN,CAAc,eAAd,CAAtB,CACP,MAAO,MAAME,CAAAA,iBAAiB,CAAGL,CAAC,CAACE,GAAF,CAAMC,MAAN,CAAc,mBAAd,CAA1B,CACP,MAAO,MAAMG,CAAAA,qBAAqB,CAAGN,CAAC,CAACE,GAAF,CAAMC,MAAN,CAAc,uBAAd,CAA9B,CACP,MAAO,MAAMI,CAAAA,eAAe,CAAGP,CAAC,CAACE,GAAF,CAAMC,MAAN,CAAc,yBAAd,CAAxB,CACP,MAAO,MAAMK,CAAAA,aAAa,CAAGR,CAAC,CAACE,GAAF,CAAMC,MAAN,CAAc,uBAAd,CAAtB,CAEPJ,GAAG,CAACU,MAAJ,CAAWC,MAAX,CAAoBN,aAApB,CAEA,GAAIO,CAAAA,YAAJ,CACA,GAAIC,CAAAA,2BAAJ,CAEA,MAAO,SAASC,CAAAA,oBAAT,EAAoF,IAArD,CAAEC,WAAF,CAAeC,eAAf,CAAgCC,YAAhC,CAAqD,2DAAJ,EAAI,CACzFL,YAAY,CAAGR,MAAM,CAACc,iBAAP,CAAyBC,SAAzB,CAAmC,CAChDC,SAAS,CAAEL,WADqC,CAEhDM,SAAS,CAAEL,eAFqC,CAGhDC,YAAY,CAAEA,YAHkC,CAIhDN,MAAM,CAAET,SAJwC,CAAnC,CAAf,CAOA,GAAIa,WAAW,EAAIC,eAAf,EAAkCC,YAAtC,CAAoD,CAClDJ,2BAA2B,CAAGD,YAA9B,CACD,CAEDR,MAAM,CAACkB,KAAP,CAAeV,YAAf,CACD,CAED,MAAO,SAASW,CAAAA,gBAAT,EAA6B,CAClC,GAAIX,YAAJ,CAAkB,MAAOY,CAAAA,OAAO,CAACC,OAAR,CAAgBb,YAAhB,CAAP,CAClB,MAAO,IAAIY,CAAAA,OAAJ,CAAYC,OAAO,EAAI,CAC5B,KAAMC,CAAAA,MAAM,CAAGC,WAAW,CAAC,IAAM,CAC/B,GAAIf,YAAJ,CAAkB,CAChBgB,aAAa,CAACF,MAAD,CAAb,CACAD,OAAO,CAACb,YAAD,CAAP,CACD,CACF,CALyB,CAKvB,GALuB,CAA1B,CAMD,CAPM,CAAP,CAQD,CAED,MAAO,SAASiB,CAAAA,+BAAT,EAA4C,CACjD,GAAIhB,2BAAJ,CAAiC,CAAE,MAAOW,CAAAA,OAAO,CAACC,OAAR,CAAgBZ,2BAAhB,CAAP,CAAqD,CACxF,MAAO,IAAIW,CAAAA,OAAJ,CAAYC,OAAO,EAAI,CAC5B,KAAMC,CAAAA,MAAM,CAAGC,WAAW,CAAC,IAAM,CAC/B,GAAId,2BAAJ,CAAiC,CAC/Be,aAAa,CAACF,MAAD,CAAb,CACAD,OAAO,CAACZ,2BAAD,CAAP,CACD,CACF,CALyB,CAKvB,GALuB,CAA1B,CAMD,CAPM,CAAP,CAQD","sourcesContent":["// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport AWS from 'aws-sdk'\n\nimport _ from 'lodash'\n\nexport const awsRegion = _.get(window, 'config.region')\nexport const cognitoRegion = _.get(window, 'config.region')\nexport const cognitoUserPoolId = _.get(window, 'config.userPoolId')\nexport const cognitoIdentityPoolId = _.get(window, 'config.identityPoolId')\nexport const cognitoClientId = _.get(window, 'config.userPoolClientId')\nexport const cognitoDomain = _.get(window, 'config.userPoolDomain')\n\nAWS.config.region = cognitoRegion\n\nlet cachedClient\nlet cachedClientWithCredentials\n\nexport function initApiGatewayClient ({ accessKeyId, secretAccessKey, sessionToken } = {}) {\n  cachedClient = window.apigClientFactory.newClient({\n    accessKey: accessKeyId,\n    secretKey: secretAccessKey,\n    sessionToken: sessionToken,\n    region: awsRegion\n  })\n\n  if (accessKeyId && secretAccessKey && sessionToken) {\n    cachedClientWithCredentials = cachedClient\n  }\n\n  window.apigw = cachedClient\n}\n\nexport function apiGatewayClient () {\n  if (cachedClient) return Promise.resolve(cachedClient)\n  return new Promise(resolve => {\n    const poller = setInterval(() => {\n      if (cachedClient) {\n        clearInterval(poller)\n        resolve(cachedClient)\n      }\n    }, 100)\n  })\n}\n\nexport function apiGatewayClientWithCredentials () {\n  if (cachedClientWithCredentials) { return Promise.resolve(cachedClientWithCredentials) }\n  return new Promise(resolve => {\n    const poller = setInterval(() => {\n      if (cachedClientWithCredentials) {\n        clearInterval(poller)\n        resolve(cachedClientWithCredentials)\n      }\n    }, 100)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}