{"ast":null,"code":"import{useState,useCallback}from'react';/**\n * A React state hook wrapping a boolean value, returning `setTrue` and\n * `setFalse` functions which do as their names suggest. Returns `[state,\n * setTrue, setFalse, setState]`, in which the first and last functions\n * correspond to those returned by `useState`, and in which all functions (i.e.\n * all but `state`) are stable.\n *\n * This is especially useful for controlled modals, for example, which may\n * close themselves via a callback:\n * ```javascript\n * const [isOpen, open, close] = useBoolean(false)\n * return (<Modal isOpen={isOpen} closeSelf={close}> ... </Modal>)\n * ```\n */export const useBoolean=initialState=>{const[state,setState]=useState(initialState);const setTrue=useCallback(()=>setState(true),[]);const setFalse=useCallback(()=>setState(false),[]);return[state,setTrue,setFalse,setState];};","map":{"version":3,"sources":["/home/daniyal/Downloads/vap-webapp (1)/vap-webapp/web-content/static-asset-uploader/src/utils/use-boolean.jsx"],"names":["useState","useCallback","useBoolean","initialState","state","setState","setTrue","setFalse"],"mappings":"AAAA,OAASA,QAAT,CAAmBC,WAAnB,KAAsC,OAAtC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAMC,CAAAA,UAAU,CAAGC,YAAY,EAAI,CACxC,KAAM,CAACC,KAAD,CAAQC,QAAR,EAAoBL,QAAQ,CAACG,YAAD,CAAlC,CACA,KAAMG,CAAAA,OAAO,CAAGL,WAAW,CAAC,IAAMI,QAAQ,CAAC,IAAD,CAAf,CAAuB,EAAvB,CAA3B,CACA,KAAME,CAAAA,QAAQ,CAAGN,WAAW,CAAC,IAAMI,QAAQ,CAAC,KAAD,CAAf,CAAwB,EAAxB,CAA5B,CACA,MAAO,CAACD,KAAD,CAAQE,OAAR,CAAiBC,QAAjB,CAA2BF,QAA3B,CAAP,CACD,CALM","sourcesContent":["import { useState, useCallback } from 'react'\n\n/**\n * A React state hook wrapping a boolean value, returning `setTrue` and\n * `setFalse` functions which do as their names suggest. Returns `[state,\n * setTrue, setFalse, setState]`, in which the first and last functions\n * correspond to those returned by `useState`, and in which all functions (i.e.\n * all but `state`) are stable.\n *\n * This is especially useful for controlled modals, for example, which may\n * close themselves via a callback:\n * ```javascript\n * const [isOpen, open, close] = useBoolean(false)\n * return (<Modal isOpen={isOpen} closeSelf={close}> ... </Modal>)\n * ```\n */\nexport const useBoolean = initialState => {\n  const [state, setState] = useState(initialState)\n  const setTrue = useCallback(() => setState(true), [])\n  const setFalse = useCallback(() => setState(false), [])\n  return [state, setTrue, setFalse, setState]\n}\n"]},"metadata":{},"sourceType":"module"}