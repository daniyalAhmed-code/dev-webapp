{"ast":null,"code":"import React,{useCallback,useEffect,useState}from'react';import{Button,Container,Header,Message,Modal}from'semantic-ui-react';import*as MessageList from'components/MessageList';import*as AccountService from'services/accounts';import*as AccountsTable from'components/Admin/Accounts/AccountsTable';import*as AccountsTableColumns from'components/Admin/Accounts/AccountsTableColumns';import{store}from'services/state';import _ from'lodash';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const RegisteredAccounts=()=>{const[accounts,setAccounts]=useState([]);const[loading,setLoading]=useState(true);const[selectedAccount,setSelectedAccount]=useState(undefined);const[deleteModalOpen,setDeleteModalOpen]=useState(false);const[promoteModalOpen,setPromoteModalOpen]=useState(false);const[messages,sendMessage]=MessageList.useMessages();const refreshAccounts=async()=>{const[all,admins]=await Promise.all([AccountService.fetchRegisteredAccounts(),AccountService.fetchAdminAccounts()]);const allMap={};all.forEach(user=>{allMap[user.UserId]=user;});admins.forEach(admin=>{admin.IsAdmin=true;if(admin.EmailAddress===store.user.email){admin.EmailAddress+=' (you)';}allMap[admin.UserId]=admin;});return setAccounts(Object.values(allMap));};const isYou=user=>{return _.get(store,'user.email')+' (you)'===user.EmailAddress;};// Initial load\nuseEffect(()=>{refreshAccounts().finally(()=>setLoading(false));},[]);const onSelectAccount=useCallback(account=>setSelectedAccount(account),[setSelectedAccount]);const onConfirmDelete=useCallback(async()=>{setLoading(true);setDeleteModalOpen(false);try{await AccountService.deleteAccountByUserId(selectedAccount.UserId);sendMessage(dismiss=>/*#__PURE__*/_jsx(DeleteSuccessMessage,{account:selectedAccount,dismiss:dismiss}));await refreshAccounts();}catch(error){sendMessage(dismiss=>/*#__PURE__*/_jsx(DeleteFailureMessage,{account:selectedAccount,dismiss:dismiss,errorMessage:error.message}));}finally{setLoading(false);}},[sendMessage,selectedAccount]);const onConfirmPromote=useCallback(async()=>{setLoading(true);setPromoteModalOpen(false);try{await AccountService.promoteAccountByUserId(selectedAccount.UserId);sendMessage(dismiss=>/*#__PURE__*/_jsx(PromoteSuccessMessage,{account:selectedAccount,dismiss:dismiss}));await refreshAccounts();}catch(error){sendMessage(dismiss=>/*#__PURE__*/_jsx(PromoteFailureMessage,{account:selectedAccount,dismiss:dismiss,errorMessage:error.message}));}finally{setLoading(false);}},[sendMessage,selectedAccount]);return/*#__PURE__*/_jsxs(Container,{fluid:true,style:{padding:'2em'},children:[/*#__PURE__*/_jsx(Header,{as:\"h1\",children:\"Registered accounts\"}),/*#__PURE__*/_jsx(MessageList.MessageList,{messages:messages}),/*#__PURE__*/_jsx(AccountsTable.AccountsTable,{accounts:accounts,columns:[AccountsTableColumns.EmailAddress,AccountsTableColumns.IsAdmin,AccountsTableColumns.DateRegistered,AccountsTableColumns.RegistrationMethod,AccountsTableColumns.ApiKeyId],loading:loading,selectedAccount:selectedAccount,onSelectAccount:onSelectAccount,children:/*#__PURE__*/_jsx(TableActions,{canDelete:!loading&&selectedAccount&&!isYou(selectedAccount),onClickDelete:()=>setDeleteModalOpen(true),canPromote:!loading&&selectedAccount,isAdmin:selectedAccount&&selectedAccount.IsAdmin,onClickPromote:()=>setPromoteModalOpen(true)})}),/*#__PURE__*/_jsx(DeleteAccountModal,{account:selectedAccount,onConfirm:onConfirmDelete,open:deleteModalOpen,isAdmin:selectedAccount&&selectedAccount.IsAdmin,onClose:()=>setDeleteModalOpen(false)}),/*#__PURE__*/_jsx(PromoteAccountModal,{account:selectedAccount,onConfirm:onConfirmPromote,open:promoteModalOpen,onClose:()=>setPromoteModalOpen(false)})]});};export default RegisteredAccounts;const TableActions=/*#__PURE__*/React.memo(_ref=>{let{canDelete,onClickDelete,canPromote,onClickPromote,isAdmin}=_ref;return/*#__PURE__*/_jsxs(Button.Group,{children:[/*#__PURE__*/_jsx(Button,{content:\"Delete\",disabled:!canDelete,onClick:onClickDelete}),/*#__PURE__*/_jsx(Button,{content:\"Promote to Admin\",disabled:!canPromote||isAdmin,onClick:onClickPromote})]});});const DeleteAccountModal=/*#__PURE__*/React.memo(_ref2=>{let{account,onConfirm,open,onClose,isAdmin}=_ref2;return account&&/*#__PURE__*/_jsxs(Modal,{size:\"small\",open:open,onClose:onClose,children:[/*#__PURE__*/_jsx(Modal.Header,{children:\"Delete account\"}),/*#__PURE__*/_jsxs(Modal.Content,{children:[isAdmin&&/*#__PURE__*/_jsxs(Message,{negative:true,children:[/*#__PURE__*/_jsx(Message.Header,{children:\"Danger! This is an admin account.\"}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Deleting an admin account could cause temporary loss of access and temporary inability to configure the developer portal.\"})})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Are you sure you want to delete the account \",/*#__PURE__*/_jsx(\"strong\",{children:account.EmailAddress}),\", and de-activate the             associated API key? This action is irreversible.\"]})]}),/*#__PURE__*/_jsxs(Modal.Actions,{children:[/*#__PURE__*/_jsx(Button,{onClick:onClose,children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{negative:true,onClick:onConfirm,children:\"Delete\"})]})]});});const PromoteAccountModal=/*#__PURE__*/React.memo(_ref3=>{let{account,onConfirm,open,onClose}=_ref3;return account&&/*#__PURE__*/_jsxs(Modal,{size:\"small\",open:open,onClose:onClose,children:[/*#__PURE__*/_jsx(Modal.Header,{children:\"Confirm promotion\"}),/*#__PURE__*/_jsxs(Modal.Content,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Are you sure you want to promote the account\",' ',/*#__PURE__*/_jsx(\"strong\",{children:account.EmailAddress}),\" to Admin? This will allow the account to perform any Admin actions, including deleting and promoting other accounts.\"]}),/*#__PURE__*/_jsx(\"p\",{children:\"Only the owner of the Developer Portal can demote the account, through the Cognito console.\"})]}),/*#__PURE__*/_jsxs(Modal.Actions,{children:[/*#__PURE__*/_jsx(Button,{onClick:onClose,children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{negative:true,onClick:onConfirm,children:\"Promote\"})]})]});});const DeleteSuccessMessage=/*#__PURE__*/React.memo(_ref4=>{let{account,dismiss}=_ref4;return/*#__PURE__*/_jsx(Message,{onDismiss:dismiss,positive:true,children:/*#__PURE__*/_jsxs(Message.Content,{children:[\"Deleted account \",/*#__PURE__*/_jsx(\"strong\",{children:account.EmailAddress}),\".\"]})});});const DeleteFailureMessage=/*#__PURE__*/React.memo(_ref5=>{let{account,errorMessage,dismiss}=_ref5;return/*#__PURE__*/_jsx(Message,{onDismiss:dismiss,negative:true,children:/*#__PURE__*/_jsxs(Message.Content,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Failed to delete account \",/*#__PURE__*/_jsx(\"strong\",{children:account.EmailAddress}),\".\"]}),errorMessage&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Error message: \",errorMessage]})]})});});const PromoteSuccessMessage=/*#__PURE__*/React.memo(_ref6=>{let{account,dismiss}=_ref6;return/*#__PURE__*/_jsx(Message,{onDismiss:dismiss,positive:true,children:/*#__PURE__*/_jsxs(Message.Content,{children:[\"Promoted account \",/*#__PURE__*/_jsx(\"strong\",{children:account.EmailAddress}),\".\"]})});});const PromoteFailureMessage=/*#__PURE__*/React.memo(_ref7=>{let{account,errorMessage,dismiss}=_ref7;return/*#__PURE__*/_jsx(Message,{onDismiss:dismiss,negative:true,children:/*#__PURE__*/_jsxs(Message.Content,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Failed to promote account \",/*#__PURE__*/_jsx(\"strong\",{children:account.EmailAddress}),\".\"]}),errorMessage&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Error message: \",errorMessage]})]})});});","map":{"version":3,"sources":["/home/daniyal/Downloads/vap-webapp (1)/vap-webapp/web-content/static-asset-uploader/src/pages/Admin/Accounts/RegisteredAccounts.jsx"],"names":["React","useCallback","useEffect","useState","Button","Container","Header","Message","Modal","MessageList","AccountService","AccountsTable","AccountsTableColumns","store","_","RegisteredAccounts","accounts","setAccounts","loading","setLoading","selectedAccount","setSelectedAccount","undefined","deleteModalOpen","setDeleteModalOpen","promoteModalOpen","setPromoteModalOpen","messages","sendMessage","useMessages","refreshAccounts","all","admins","Promise","fetchRegisteredAccounts","fetchAdminAccounts","allMap","forEach","user","UserId","admin","IsAdmin","EmailAddress","email","Object","values","isYou","get","finally","onSelectAccount","account","onConfirmDelete","deleteAccountByUserId","dismiss","error","message","onConfirmPromote","promoteAccountByUserId","padding","DateRegistered","RegistrationMethod","ApiKeyId","TableActions","memo","canDelete","onClickDelete","canPromote","onClickPromote","isAdmin","DeleteAccountModal","onConfirm","open","onClose","PromoteAccountModal","DeleteSuccessMessage","DeleteFailureMessage","errorMessage","PromoteSuccessMessage","PromoteFailureMessage"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,WAAhB,CAA6BC,SAA7B,CAAwCC,QAAxC,KAAwD,OAAxD,CACA,OAASC,MAAT,CAAiBC,SAAjB,CAA4BC,MAA5B,CAAoCC,OAApC,CAA6CC,KAA7C,KAA0D,mBAA1D,CAEA,MAAO,GAAKC,CAAAA,WAAZ,KAA6B,wBAA7B,CACA,MAAO,GAAKC,CAAAA,cAAZ,KAAgC,mBAAhC,CACA,MAAO,GAAKC,CAAAA,aAAZ,KAA+B,yCAA/B,CACA,MAAO,GAAKC,CAAAA,oBAAZ,KAAsC,gDAAtC,CACA,OAASC,KAAT,KAAsB,gBAAtB,CACA,MAAOC,CAAAA,CAAP,KAAc,QAAd,C,wFAEA,KAAMC,CAAAA,kBAAkB,CAAG,IAAM,CAC/B,KAAM,CAACC,QAAD,CAAWC,WAAX,EAA0Bd,QAAQ,CAAC,EAAD,CAAxC,CACA,KAAM,CAACe,OAAD,CAAUC,UAAV,EAAwBhB,QAAQ,CAAC,IAAD,CAAtC,CACA,KAAM,CAACiB,eAAD,CAAkBC,kBAAlB,EAAwClB,QAAQ,CAACmB,SAAD,CAAtD,CACA,KAAM,CAACC,eAAD,CAAkBC,kBAAlB,EAAwCrB,QAAQ,CAAC,KAAD,CAAtD,CACA,KAAM,CAACsB,gBAAD,CAAmBC,mBAAnB,EAA0CvB,QAAQ,CAAC,KAAD,CAAxD,CACA,KAAM,CAACwB,QAAD,CAAWC,WAAX,EAA0BnB,WAAW,CAACoB,WAAZ,EAAhC,CAEA,KAAMC,CAAAA,eAAe,CAAG,SAAY,CAClC,KAAM,CAACC,GAAD,CAAMC,MAAN,EAAgB,KAAMC,CAAAA,OAAO,CAACF,GAAR,CAAY,CACtCrB,cAAc,CAACwB,uBAAf,EADsC,CAEtCxB,cAAc,CAACyB,kBAAf,EAFsC,CAAZ,CAA5B,CAKA,KAAMC,CAAAA,MAAM,CAAG,EAAf,CAEAL,GAAG,CAACM,OAAJ,CAAYC,IAAI,EAAI,CAAEF,MAAM,CAACE,IAAI,CAACC,MAAN,CAAN,CAAsBD,IAAtB,CAA4B,CAAlD,EACAN,MAAM,CAACK,OAAP,CAAeG,KAAK,EAAI,CACtBA,KAAK,CAACC,OAAN,CAAgB,IAAhB,CACA,GAAID,KAAK,CAACE,YAAN,GAAuB7B,KAAK,CAACyB,IAAN,CAAWK,KAAtC,CAA6C,CAC3CH,KAAK,CAACE,YAAN,EAAsB,QAAtB,CACD,CACDN,MAAM,CAACI,KAAK,CAACD,MAAP,CAAN,CAAuBC,KAAvB,CACD,CAND,EAQA,MAAOvB,CAAAA,WAAW,CAAC2B,MAAM,CAACC,MAAP,CAAcT,MAAd,CAAD,CAAlB,CACD,CAlBD,CAoBA,KAAMU,CAAAA,KAAK,CAAIR,IAAD,EAAU,CACtB,MAAQxB,CAAAA,CAAC,CAACiC,GAAF,CAAMlC,KAAN,CAAa,YAAb,EAA6B,QAA9B,GAA4CyB,IAAI,CAACI,YAAxD,CACD,CAFD,CAIA;AACAxC,SAAS,CAAC,IAAM,CACd4B,eAAe,GAAGkB,OAAlB,CAA0B,IAAM7B,UAAU,CAAC,KAAD,CAA1C,EACD,CAFQ,CAEN,EAFM,CAAT,CAIA,KAAM8B,CAAAA,eAAe,CAAGhD,WAAW,CAACiD,OAAO,EAAI7B,kBAAkB,CAAC6B,OAAD,CAA9B,CAAyC,CAC1E7B,kBAD0E,CAAzC,CAAnC,CAIA,KAAM8B,CAAAA,eAAe,CAAGlD,WAAW,CAAC,SAAY,CAC9CkB,UAAU,CAAC,IAAD,CAAV,CACAK,kBAAkB,CAAC,KAAD,CAAlB,CACA,GAAI,CACF,KAAMd,CAAAA,cAAc,CAAC0C,qBAAf,CAAqChC,eAAe,CAACmB,MAArD,CAAN,CACAX,WAAW,CAACyB,OAAO,eACjB,KAAC,oBAAD,EAAsB,OAAO,CAAEjC,eAA/B,CAAgD,OAAO,CAAEiC,OAAzD,EADS,CAAX,CAGA,KAAMvB,CAAAA,eAAe,EAArB,CACD,CAAC,MAAOwB,KAAP,CAAc,CACd1B,WAAW,CAACyB,OAAO,eACjB,KAAC,oBAAD,EACE,OAAO,CAAEjC,eADX,CAEE,OAAO,CAAEiC,OAFX,CAGE,YAAY,CAAEC,KAAK,CAACC,OAHtB,EADS,CAAX,CAOD,CAdD,OAcU,CACRpC,UAAU,CAAC,KAAD,CAAV,CACD,CACF,CApBkC,CAoBhC,CAACS,WAAD,CAAcR,eAAd,CApBgC,CAAnC,CAsBA,KAAMoC,CAAAA,gBAAgB,CAAGvD,WAAW,CAAC,SAAY,CAC/CkB,UAAU,CAAC,IAAD,CAAV,CACAO,mBAAmB,CAAC,KAAD,CAAnB,CACA,GAAI,CACF,KAAMhB,CAAAA,cAAc,CAAC+C,sBAAf,CAAsCrC,eAAe,CAACmB,MAAtD,CAAN,CACAX,WAAW,CAACyB,OAAO,eACjB,KAAC,qBAAD,EAAuB,OAAO,CAAEjC,eAAhC,CAAiD,OAAO,CAAEiC,OAA1D,EADS,CAAX,CAGA,KAAMvB,CAAAA,eAAe,EAArB,CACD,CAAC,MAAOwB,KAAP,CAAc,CACd1B,WAAW,CAACyB,OAAO,eACjB,KAAC,qBAAD,EACE,OAAO,CAAEjC,eADX,CAEE,OAAO,CAAEiC,OAFX,CAGE,YAAY,CAAEC,KAAK,CAACC,OAHtB,EADS,CAAX,CAOD,CAdD,OAcU,CACRpC,UAAU,CAAC,KAAD,CAAV,CACD,CACF,CApBmC,CAoBjC,CAACS,WAAD,CAAcR,eAAd,CApBiC,CAApC,CAsBA,mBACE,MAAC,SAAD,EAAW,KAAK,KAAhB,CAAiB,KAAK,CAAE,CAAEsC,OAAO,CAAE,KAAX,CAAxB,wBACE,KAAC,MAAD,EAAQ,EAAE,CAAC,IAAX,iCADF,cAEE,KAAC,WAAD,CAAa,WAAb,EAAyB,QAAQ,CAAE/B,QAAnC,EAFF,cAGE,KAAC,aAAD,CAAe,aAAf,EACE,QAAQ,CAAEX,QADZ,CAEE,OAAO,CAAE,CACPJ,oBAAoB,CAAC8B,YADd,CAEP9B,oBAAoB,CAAC6B,OAFd,CAGP7B,oBAAoB,CAAC+C,cAHd,CAIP/C,oBAAoB,CAACgD,kBAJd,CAKPhD,oBAAoB,CAACiD,QALd,CAFX,CASE,OAAO,CAAE3C,OATX,CAUE,eAAe,CAAEE,eAVnB,CAWE,eAAe,CAAE6B,eAXnB,uBAaE,KAAC,YAAD,EACE,SAAS,CAAE,CAAC/B,OAAD,EAAYE,eAAZ,EAA+B,CAAC0B,KAAK,CAAC1B,eAAD,CADlD,CAEE,aAAa,CAAE,IAAMI,kBAAkB,CAAC,IAAD,CAFzC,CAGE,UAAU,CAAE,CAACN,OAAD,EAAYE,eAH1B,CAIE,OAAO,CAAEA,eAAe,EAAIA,eAAe,CAACqB,OAJ9C,CAKE,cAAc,CAAE,IAAMf,mBAAmB,CAAC,IAAD,CAL3C,EAbF,EAHF,cAwBE,KAAC,kBAAD,EACE,OAAO,CAAEN,eADX,CAEE,SAAS,CAAE+B,eAFb,CAGE,IAAI,CAAE5B,eAHR,CAIE,OAAO,CAAEH,eAAe,EAAIA,eAAe,CAACqB,OAJ9C,CAKE,OAAO,CAAE,IAAMjB,kBAAkB,CAAC,KAAD,CALnC,EAxBF,cA+BE,KAAC,mBAAD,EACE,OAAO,CAAEJ,eADX,CAEE,SAAS,CAAEoC,gBAFb,CAGE,IAAI,CAAE/B,gBAHR,CAIE,OAAO,CAAE,IAAMC,mBAAmB,CAAC,KAAD,CAJpC,EA/BF,GADF,CAwCD,CA7HD,CA8HA,cAAeX,CAAAA,kBAAf,CAEA,KAAM+C,CAAAA,YAAY,cAAG9D,KAAK,CAAC+D,IAAN,CACnB,UAAC,CAAEC,SAAF,CAAaC,aAAb,CAA4BC,UAA5B,CAAwCC,cAAxC,CAAwDC,OAAxD,CAAD,yBACE,MAAC,MAAD,CAAQ,KAAR,yBACE,KAAC,MAAD,EAAQ,OAAO,CAAC,QAAhB,CAAyB,QAAQ,CAAE,CAACJ,SAApC,CAA+C,OAAO,CAAEC,aAAxD,EADF,cAEE,KAAC,MAAD,EACE,OAAO,CAAC,kBADV,CAEE,QAAQ,CAAE,CAACC,UAAD,EAAeE,OAF3B,CAGE,OAAO,CAAED,cAHX,EAFF,GADF,EADmB,CAArB,CAaA,KAAME,CAAAA,kBAAkB,cAAGrE,KAAK,CAAC+D,IAAN,CACzB,WAAC,CAAEb,OAAF,CAAWoB,SAAX,CAAsBC,IAAtB,CAA4BC,OAA5B,CAAqCJ,OAArC,CAAD,aACElB,CAAAA,OAAO,eACL,MAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,IAAI,CAAEqB,IAA1B,CAAgC,OAAO,CAAEC,OAAzC,wBACE,KAAC,KAAD,CAAO,MAAP,6BADF,cAEE,MAAC,KAAD,CAAO,OAAP,YACGJ,OAAO,eACN,MAAC,OAAD,EAAS,QAAQ,KAAjB,wBACE,KAAC,OAAD,CAAS,MAAT,gDADF,cAEE,gCAAG,qJAAH,EAFF,GAFJ,cAOE,iFAC8C,wBAASlB,OAAO,CAACR,YAAjB,EAD9C,wFAPF,GAFF,cAaE,MAAC,KAAD,CAAO,OAAP,yBACE,KAAC,MAAD,EAAQ,OAAO,CAAE8B,OAAjB,oBADF,cAEE,KAAC,MAAD,EAAQ,QAAQ,KAAhB,CAAiB,OAAO,CAAEF,SAA1B,oBAFF,GAbF,GAFJ,EADyB,CAA3B,CA0BA,KAAMG,CAAAA,mBAAmB,cAAGzE,KAAK,CAAC+D,IAAN,CAC1B,WAAC,CAAEb,OAAF,CAAWoB,SAAX,CAAsBC,IAAtB,CAA4BC,OAA5B,CAAD,aACEtB,CAAAA,OAAO,eACL,MAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,IAAI,CAAEqB,IAA1B,CAAgC,OAAO,CAAEC,OAAzC,wBACE,KAAC,KAAD,CAAO,MAAP,gCADF,cAEE,MAAC,KAAD,CAAO,OAAP,yBACE,oEAC+C,GAD/C,cAEE,wBAAStB,OAAO,CAACR,YAAjB,EAFF,2HADF,cAOE,kHAPF,GAFF,cAcE,MAAC,KAAD,CAAO,OAAP,yBACE,KAAC,MAAD,EAAQ,OAAO,CAAE8B,OAAjB,oBADF,cAEE,KAAC,MAAD,EAAQ,QAAQ,KAAhB,CAAiB,OAAO,CAAEF,SAA1B,qBAFF,GAdF,GAFJ,EAD0B,CAA5B,CA2BA,KAAMI,CAAAA,oBAAoB,cAAG1E,KAAK,CAAC+D,IAAN,CAAW,WAAC,CAAEb,OAAF,CAAWG,OAAX,CAAD,0BACtC,KAAC,OAAD,EAAS,SAAS,CAAEA,OAApB,CAA6B,QAAQ,KAArC,uBACE,MAAC,OAAD,CAAS,OAAT,4CACkB,wBAASH,OAAO,CAACR,YAAjB,EADlB,OADF,EADsC,EAAX,CAA7B,CAQA,KAAMiC,CAAAA,oBAAoB,cAAG3E,KAAK,CAAC+D,IAAN,CAC3B,WAAC,CAAEb,OAAF,CAAW0B,YAAX,CAAyBvB,OAAzB,CAAD,0BACE,KAAC,OAAD,EAAS,SAAS,CAAEA,OAApB,CAA6B,QAAQ,KAArC,uBACE,MAAC,OAAD,CAAS,OAAT,yBACE,8DAC2B,wBAASH,OAAO,CAACR,YAAjB,EAD3B,OADF,CAIGkC,YAAY,eAAI,uCAAmBA,YAAnB,GAJnB,GADF,EADF,EAD2B,CAA7B,CAaA,KAAMC,CAAAA,qBAAqB,cAAG7E,KAAK,CAAC+D,IAAN,CAAW,WAAC,CAAEb,OAAF,CAAWG,OAAX,CAAD,0BACvC,KAAC,OAAD,EAAS,SAAS,CAAEA,OAApB,CAA6B,QAAQ,KAArC,uBACE,MAAC,OAAD,CAAS,OAAT,6CACmB,wBAASH,OAAO,CAACR,YAAjB,EADnB,OADF,EADuC,EAAX,CAA9B,CAQA,KAAMoC,CAAAA,qBAAqB,cAAG9E,KAAK,CAAC+D,IAAN,CAC5B,WAAC,CAAEb,OAAF,CAAW0B,YAAX,CAAyBvB,OAAzB,CAAD,0BACE,KAAC,OAAD,EAAS,SAAS,CAAEA,OAApB,CAA6B,QAAQ,KAArC,uBACE,MAAC,OAAD,CAAS,OAAT,yBACE,+DAC4B,wBAASH,OAAO,CAACR,YAAjB,EAD5B,OADF,CAIGkC,YAAY,eAAI,uCAAmBA,YAAnB,GAJnB,GADF,EADF,EAD4B,CAA9B","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Button, Container, Header, Message, Modal } from 'semantic-ui-react'\n\nimport * as MessageList from 'components/MessageList'\nimport * as AccountService from 'services/accounts'\nimport * as AccountsTable from 'components/Admin/Accounts/AccountsTable'\nimport * as AccountsTableColumns from 'components/Admin/Accounts/AccountsTableColumns'\nimport { store } from 'services/state'\nimport _ from 'lodash'\n\nconst RegisteredAccounts = () => {\n  const [accounts, setAccounts] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [selectedAccount, setSelectedAccount] = useState(undefined)\n  const [deleteModalOpen, setDeleteModalOpen] = useState(false)\n  const [promoteModalOpen, setPromoteModalOpen] = useState(false)\n  const [messages, sendMessage] = MessageList.useMessages()\n\n  const refreshAccounts = async () => {\n    const [all, admins] = await Promise.all([\n      AccountService.fetchRegisteredAccounts(),\n      AccountService.fetchAdminAccounts()\n    ])\n\n    const allMap = {}\n\n    all.forEach(user => { allMap[user.UserId] = user })\n    admins.forEach(admin => {\n      admin.IsAdmin = true\n      if (admin.EmailAddress === store.user.email) {\n        admin.EmailAddress += ' (you)'\n      }\n      allMap[admin.UserId] = admin\n    })\n\n    return setAccounts(Object.values(allMap))\n  }\n\n  const isYou = (user) => {\n    return (_.get(store, 'user.email') + ' (you)') === user.EmailAddress\n  }\n\n  // Initial load\n  useEffect(() => {\n    refreshAccounts().finally(() => setLoading(false))\n  }, [])\n\n  const onSelectAccount = useCallback(account => setSelectedAccount(account), [\n    setSelectedAccount\n  ])\n\n  const onConfirmDelete = useCallback(async () => {\n    setLoading(true)\n    setDeleteModalOpen(false)\n    try {\n      await AccountService.deleteAccountByUserId(selectedAccount.UserId)\n      sendMessage(dismiss => (\n        <DeleteSuccessMessage account={selectedAccount} dismiss={dismiss} />\n      ))\n      await refreshAccounts()\n    } catch (error) {\n      sendMessage(dismiss => (\n        <DeleteFailureMessage\n          account={selectedAccount}\n          dismiss={dismiss}\n          errorMessage={error.message}\n        />\n      ))\n    } finally {\n      setLoading(false)\n    }\n  }, [sendMessage, selectedAccount])\n\n  const onConfirmPromote = useCallback(async () => {\n    setLoading(true)\n    setPromoteModalOpen(false)\n    try {\n      await AccountService.promoteAccountByUserId(selectedAccount.UserId)\n      sendMessage(dismiss => (\n        <PromoteSuccessMessage account={selectedAccount} dismiss={dismiss} />\n      ))\n      await refreshAccounts()\n    } catch (error) {\n      sendMessage(dismiss => (\n        <PromoteFailureMessage\n          account={selectedAccount}\n          dismiss={dismiss}\n          errorMessage={error.message}\n        />\n      ))\n    } finally {\n      setLoading(false)\n    }\n  }, [sendMessage, selectedAccount])\n\n  return (\n    <Container fluid style={{ padding: '2em' }}>\n      <Header as='h1'>Registered accounts</Header>\n      <MessageList.MessageList messages={messages} />\n      <AccountsTable.AccountsTable\n        accounts={accounts}\n        columns={[\n          AccountsTableColumns.EmailAddress,\n          AccountsTableColumns.IsAdmin,\n          AccountsTableColumns.DateRegistered,\n          AccountsTableColumns.RegistrationMethod,\n          AccountsTableColumns.ApiKeyId\n        ]}\n        loading={loading}\n        selectedAccount={selectedAccount}\n        onSelectAccount={onSelectAccount}\n      >\n        <TableActions\n          canDelete={!loading && selectedAccount && !isYou(selectedAccount)}\n          onClickDelete={() => setDeleteModalOpen(true)}\n          canPromote={!loading && selectedAccount}\n          isAdmin={selectedAccount && selectedAccount.IsAdmin}\n          onClickPromote={() => setPromoteModalOpen(true)}\n        />\n      </AccountsTable.AccountsTable>\n      <DeleteAccountModal\n        account={selectedAccount}\n        onConfirm={onConfirmDelete}\n        open={deleteModalOpen}\n        isAdmin={selectedAccount && selectedAccount.IsAdmin}\n        onClose={() => setDeleteModalOpen(false)}\n      />\n      <PromoteAccountModal\n        account={selectedAccount}\n        onConfirm={onConfirmPromote}\n        open={promoteModalOpen}\n        onClose={() => setPromoteModalOpen(false)}\n      />\n    </Container>\n  )\n}\nexport default RegisteredAccounts\n\nconst TableActions = React.memo(\n  ({ canDelete, onClickDelete, canPromote, onClickPromote, isAdmin }) => (\n    <Button.Group>\n      <Button content='Delete' disabled={!canDelete} onClick={onClickDelete} />\n      <Button\n        content='Promote to Admin'\n        disabled={!canPromote || isAdmin}\n        onClick={onClickPromote}\n      />\n    </Button.Group>\n  )\n)\n\nconst DeleteAccountModal = React.memo(\n  ({ account, onConfirm, open, onClose, isAdmin }) =>\n    account && (\n      <Modal size='small' open={open} onClose={onClose}>\n        <Modal.Header>Delete account</Modal.Header>\n        <Modal.Content>\n          {isAdmin && (\n            <Message negative>\n              <Message.Header>Danger! This is an admin account.</Message.Header>\n              <p><strong>Deleting an admin account could cause temporary loss of access and temporary inability to configure the developer portal.</strong></p>\n            </Message>\n          )}\n          <p>\n            Are you sure you want to delete the account <strong>{account.EmailAddress}</strong>, and de-activate the             associated API key? This action is irreversible.\n          </p>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button negative onClick={onConfirm}>\n            Delete\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    )\n)\n\nconst PromoteAccountModal = React.memo(\n  ({ account, onConfirm, open, onClose }) =>\n    account && (\n      <Modal size='small' open={open} onClose={onClose}>\n        <Modal.Header>Confirm promotion</Modal.Header>\n        <Modal.Content>\n          <p>\n            Are you sure you want to promote the account{' '}\n            <strong>{account.EmailAddress}</strong> to Admin? This will allow\n            the account to perform any Admin actions, including deleting and\n            promoting other accounts.\n          </p>\n          <p>\n            Only the owner of the Developer Portal can demote the account,\n            through the Cognito console.\n          </p>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button negative onClick={onConfirm}>\n            Promote\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    )\n)\n\nconst DeleteSuccessMessage = React.memo(({ account, dismiss }) => (\n  <Message onDismiss={dismiss} positive>\n    <Message.Content>\n      Deleted account <strong>{account.EmailAddress}</strong>.\n    </Message.Content>\n  </Message>\n))\n\nconst DeleteFailureMessage = React.memo(\n  ({ account, errorMessage, dismiss }) => (\n    <Message onDismiss={dismiss} negative>\n      <Message.Content>\n        <p>\n          Failed to delete account <strong>{account.EmailAddress}</strong>.\n        </p>\n        {errorMessage && <p>Error message: {errorMessage}</p>}\n      </Message.Content>\n    </Message>\n  )\n)\n\nconst PromoteSuccessMessage = React.memo(({ account, dismiss }) => (\n  <Message onDismiss={dismiss} positive>\n    <Message.Content>\n      Promoted account <strong>{account.EmailAddress}</strong>.\n    </Message.Content>\n  </Message>\n))\n\nconst PromoteFailureMessage = React.memo(\n  ({ account, errorMessage, dismiss }) => (\n    <Message onDismiss={dismiss} negative>\n      <Message.Content>\n        <p>\n          Failed to promote account <strong>{account.EmailAddress}</strong>.\n        </p>\n        {errorMessage && <p>Error message: {errorMessage}</p>}\n      </Message.Content>\n    </Message>\n  )\n)\n"]},"metadata":{},"sourceType":"module"}