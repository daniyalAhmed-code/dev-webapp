{"ast":null,"code":"import React,{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export const MessageList=_ref=>{let{messages}=_ref;return messages.map(_ref2=>{let{render,id}=_ref2;return/*#__PURE__*/_jsx(React.Fragment,{children:render()},id);});};/**\n * A Hook for operating a list of \"messages\" which should be self-dismissable.\n * Returns `[messages, sendMessage]`, where:\n *    - `messages` is an array of messages, which should be provided as a prop\n *      to `MessageList` to be rendered\n *    - `sendMessage` is a function which accepts a renderer callback, and\n *      calls the callback to obtain a renderable message to append to\n *      `messages`. The renderer callback should accept a `dismiss` function as\n *      its sole argument, which removes the renderable message from `messages`\n *      when called.\n */export const useMessages=()=>{const[state,setState]=useState({messages:[],nextId:0});const sendMessage=renderWithDismiss=>{const id=state.nextId;const dismiss=()=>{setState(state=>({...state,messages:state.messages.filter(message=>message.id!==id)}));};const newMessage={render:()=>renderWithDismiss(dismiss),id:state.nextId};setState(state=>({messages:[...state.messages,newMessage],nextId:state.nextId+1}));};const clearMessages=()=>{setState(state=>({...state,messages:[]}));};return[state.messages,sendMessage,clearMessages];};","map":{"version":3,"sources":["/home/daniyal/Downloads/vap-webapp (1)/vap-webapp/web-content/static-asset-uploader/src/components/MessageList.jsx"],"names":["React","useState","MessageList","messages","map","render","id","useMessages","state","setState","nextId","sendMessage","renderWithDismiss","dismiss","filter","message","newMessage","clearMessages"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,C,2CAEA,MAAO,MAAMC,CAAAA,WAAW,CAAG,UAAC,CAAEC,QAAF,CAAD,YACzBA,CAAAA,QAAQ,CAACC,GAAT,CAAa,WAAC,CAAEC,MAAF,CAAUC,EAAV,CAAD,0BACX,KAAC,KAAD,CAAO,QAAP,WAA0BD,MAAM,EAAhC,EAAqBC,EAArB,CADW,EAAb,CADyB,EAApB,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAMC,CAAAA,WAAW,CAAG,IAAM,CAC/B,KAAM,CAACC,KAAD,CAAQC,QAAR,EAAoBR,QAAQ,CAAC,CACjCE,QAAQ,CAAE,EADuB,CAEjCO,MAAM,CAAE,CAFyB,CAAD,CAAlC,CAKA,KAAMC,CAAAA,WAAW,CAAGC,iBAAiB,EAAI,CACvC,KAAMN,CAAAA,EAAE,CAAGE,KAAK,CAACE,MAAjB,CACA,KAAMG,CAAAA,OAAO,CAAG,IAAM,CACpBJ,QAAQ,CAACD,KAAK,GAAK,CACjB,GAAGA,KADc,CAEjBL,QAAQ,CAAEK,KAAK,CAACL,QAAN,CAAeW,MAAf,CAAsBC,OAAO,EAAIA,OAAO,CAACT,EAAR,GAAeA,EAAhD,CAFO,CAAL,CAAN,CAAR,CAID,CALD,CAMA,KAAMU,CAAAA,UAAU,CAAG,CACjBX,MAAM,CAAE,IAAMO,iBAAiB,CAACC,OAAD,CADd,CAEjBP,EAAE,CAAEE,KAAK,CAACE,MAFO,CAAnB,CAIAD,QAAQ,CAACD,KAAK,GAAK,CACjBL,QAAQ,CAAE,CAAC,GAAGK,KAAK,CAACL,QAAV,CAAoBa,UAApB,CADO,CAEjBN,MAAM,CAAEF,KAAK,CAACE,MAAN,CAAe,CAFN,CAAL,CAAN,CAAR,CAID,CAhBD,CAkBA,KAAMO,CAAAA,aAAa,CAAG,IAAM,CAC1BR,QAAQ,CAACD,KAAK,GAAK,CAAE,GAAGA,KAAL,CAAYL,QAAQ,CAAE,EAAtB,CAAL,CAAN,CAAR,CACD,CAFD,CAIA,MAAO,CAACK,KAAK,CAACL,QAAP,CAAiBQ,WAAjB,CAA8BM,aAA9B,CAAP,CACD,CA7BM","sourcesContent":["import React, { useState } from 'react'\n\nexport const MessageList = ({ messages }) =>\n  messages.map(({ render, id }) => (\n    <React.Fragment key={id}>{render()}</React.Fragment>\n  ))\n\n/**\n * A Hook for operating a list of \"messages\" which should be self-dismissable.\n * Returns `[messages, sendMessage]`, where:\n *    - `messages` is an array of messages, which should be provided as a prop\n *      to `MessageList` to be rendered\n *    - `sendMessage` is a function which accepts a renderer callback, and\n *      calls the callback to obtain a renderable message to append to\n *      `messages`. The renderer callback should accept a `dismiss` function as\n *      its sole argument, which removes the renderable message from `messages`\n *      when called.\n */\nexport const useMessages = () => {\n  const [state, setState] = useState({\n    messages: [],\n    nextId: 0\n  })\n\n  const sendMessage = renderWithDismiss => {\n    const id = state.nextId\n    const dismiss = () => {\n      setState(state => ({\n        ...state,\n        messages: state.messages.filter(message => message.id !== id)\n      }))\n    }\n    const newMessage = {\n      render: () => renderWithDismiss(dismiss),\n      id: state.nextId\n    }\n    setState(state => ({\n      messages: [...state.messages, newMessage],\n      nextId: state.nextId + 1\n    }))\n  }\n\n  const clearMessages = () => {\n    setState(state => ({ ...state, messages: [] }))\n  }\n\n  return [state.messages, sendMessage, clearMessages]\n}\n"]},"metadata":{},"sourceType":"module"}